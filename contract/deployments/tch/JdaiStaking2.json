{
  "address": "0x7616A037716c570786908fB16207990168136dBC",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsDisbursed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOCKUP_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKING_FEE_RATE_X_100",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKING_FEE_RATE_X_100",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addContractBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminCanClaimAfter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminClaimableTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractDeployTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToDeposit",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disburseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disburseDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disbursePercentX100",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "getEstimatedPendingDivs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endIndex",
          "type": "uint256"
        }
      ],
      "name": "getHoldersList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "stakers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "stakingTimestamps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "lastClaimedTimeStamps",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "stakedTokens",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingDisbursement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "getPendingDivs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastClaimedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDisburseTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDivPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDivPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalEarnedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokensDisbursed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferAnyERC20Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferAnyOldERC20Token",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedDepositTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedRewardTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c05720b3fa3771337e1549577f45d707cf71b5ced9c07f0db35e802586c34f3",
  "receipt": {
    "to": null,
    "from": "0x4A4cF4741a96D8e0123a490cA720d84fD9b15bc4",
    "contractAddress": "0x7616A037716c570786908fB16207990168136dBC",
    "transactionIndex": 0,
    "gasUsed": "1871932",
    "logsBloom": "0x
    "blockHash": "0x1d5a3a904752201abded7ced0e28fe80d09856dedd3eb3ef2850621c8259e4aa",
    "transactionHash": "0x8c05720b3fa3771337e1549577f45d707cf71b5ced9c07f0db35e802586c34f3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2606143,
        "transactionHash": "0x8c05720b3fa3771337e1549577f45d707cf71b5ced9c07f0db35e802586c34f3",
        "address": "0x7616A037716c570786908fB16207990168136dBC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a4cf4741a96d8e0123a490ca720d84fd9b15bc4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1d5a3a904752201abded7ced0e28fe80d09856dedd3eb3ef2850621c8259e4aa"
      }
    ],
    "blockNumber": 2606143,
    "cumulativeGasUsed": "1871932",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "29fbc5dedf36a34f7542bed9073c9017",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDisbursed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCKUP_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_FEE_RATE_X_100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKING_FEE_RATE_X_100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addContractBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminCanClaimAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminClaimableTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractDeployTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disburseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disburseDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disbursePercentX100\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getEstimatedPendingDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endIndex\",\"type\":\"uint256\"}],\"name\":\"getHoldersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"stakers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingTimestamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lastClaimedTimeStamps\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingDisbursement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"getPendingDivs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastClaimedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDisburseTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDivPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDivPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalEarnedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensDisbursed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferAnyOldERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedDepositTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedRewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JdaiStaking2.sol\":\"JdaiStaking2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/JdaiStaking2.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n\\ncontract JdaiStaking2 is Ownable {\\n    using SafeMath for uint;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    \\n    event RewardsTransferred(address holder, uint amount);\\n    event RewardsDisbursed(uint amount);\\n    \\n    // deposit token contract address and reward token contract address\\n    // these contracts are \\\"trusted\\\" and checked to not contain re-entrancy pattern \\n    // to safely avoid checks-effects-interactions where needed to simplify logic\\n    address public trustedDepositTokenAddress = 0x5799f00453eF2BC63ED57BBE84b1E9C9416b1B14;\\n    address public trustedRewardTokenAddress = 0x4995e2FB10cD739A8f2b903686d72B16a222E114;\\n    uint public constant LOCKUP_TIME = 30 days;\\n\\n    uint public constant STAKING_FEE_RATE_X_100 = 50;\\n    uint public constant UNSTAKING_FEE_RATE_X_100 = 50;\\n\\n    // Amount of tokens\\n    uint public disburseAmount = 9900e18;\\n    // To be disbursed continuously over this duration\\n    uint public disburseDuration = 180 days;\\n\\n    // If there are any undistributed or unclaimed tokens left in contract after this time\\n    // Admin can claim them\\n    uint public adminCanClaimAfter = 200 days;\\n    \\n    \\n    // do not change this => disburse 100% rewards over `disburseDuration`\\n    uint public disbursePercentX100 = 100e2;\\n    \\n    uint public contractDeployTime;\\n    uint public adminClaimableTime;\\n    uint public lastDisburseTime;\\n    \\n    // Contracts are not allowed to deposit, claim or withdraw\\n    modifier noContractsAllowed() {\\n        require(!(address(msg.sender).isContract()) && tx.origin == msg.sender, \\\"No Contracts Allowed!\\\");\\n        _;\\n    }\\n    \\n    constructor() {\\n        contractDeployTime = block.timestamp;\\n        adminClaimableTime = contractDeployTime.add(adminCanClaimAfter);\\n        lastDisburseTime = contractDeployTime;\\n    }\\n    \\n    uint public totalClaimedRewards = 0;\\n    \\n    EnumerableSet.AddressSet private holders;\\n    \\n    mapping (address => uint) public depositedTokens;\\n    mapping (address => uint) public depositTime;\\n    mapping (address => uint) public lastClaimedTime;\\n    mapping (address => uint) public totalEarnedTokens;\\n    mapping (address => uint) public lastDivPoints;\\n    \\n    uint public totalTokensDisbursed = 0;\\n    uint public contractBalance = 0;\\n    \\n    uint public totalDivPoints = 0;\\n    uint public totalTokens = 0;\\n\\n    uint internal pointMultiplier = 1e18;\\n    \\n    function addContractBalance(uint amount) public onlyOwner {\\n        require(IERC20(trustedRewardTokenAddress).transferFrom(msg.sender, address(this), amount), \\\"Cannot add balance!\\\");\\n        contractBalance = contractBalance.add(amount);\\n    }\\n    \\n    \\n    function updateAccount(address account) private {\\n        disburseTokens();\\n        uint pendingDivs = getPendingDivs(account);\\n        if (pendingDivs > 0) {\\n            require(IERC20(trustedRewardTokenAddress).transfer(account, pendingDivs), \\\"Could not transfer tokens.\\\");\\n            totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);\\n            totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\\n            emit RewardsTransferred(account, pendingDivs);\\n        }\\n        lastClaimedTime[account] = block.timestamp;\\n        lastDivPoints[account] = totalDivPoints;\\n    }\\n    \\n    function getPendingDivs(address _holder) public view returns (uint) {\\n        if (!holders.contains(_holder)) return 0;\\n        if (depositedTokens[_holder] == 0) return 0;\\n        \\n        uint newDivPoints = totalDivPoints.sub(lastDivPoints[_holder]);\\n\\n        uint depositedAmount = depositedTokens[_holder];\\n        \\n        uint pendingDivs = depositedAmount.mul(newDivPoints).div(pointMultiplier);\\n            \\n        return pendingDivs;\\n    }\\n    \\n    function getEstimatedPendingDivs(address _holder) public view returns (uint) {\\n        uint pendingDivs = getPendingDivs(_holder);\\n        uint pendingDisbursement = getPendingDisbursement();\\n        if (contractBalance < pendingDisbursement) {\\n            pendingDisbursement = contractBalance;\\n        }\\n        uint depositedAmount = depositedTokens[_holder];\\n        if (depositedAmount == 0) return 0;\\n        if (totalTokens == 0) return 0;\\n        \\n        uint myShare = depositedAmount.mul(pendingDisbursement).div(totalTokens);\\n                                \\n        return pendingDivs.add(myShare);\\n    }\\n    \\n    function getNumberOfHolders() public view returns (uint) {\\n        return holders.length();\\n    }\\n    \\n    \\n    function deposit(uint amountToDeposit) external noContractsAllowed {\\n        require(block.timestamp.add(LOCKUP_TIME) <= contractDeployTime.add(disburseDuration), \\\"Deposits are closed now!\\\");\\n        require(amountToDeposit > 0, \\\"Cannot deposit 0 Tokens\\\");\\n        \\n        updateAccount(msg.sender);\\n        \\n        require(IERC20(trustedDepositTokenAddress).transferFrom(msg.sender, address(this), amountToDeposit), \\\"Insufficient Token Allowance\\\");\\n        \\n        uint fee = amountToDeposit.mul(STAKING_FEE_RATE_X_100).div(100e2);\\n        uint amountAfterFee = amountToDeposit.sub(fee);\\n        \\n        // require(Token(trustedDepositTokenAddress).transfer(owner, fee), \\\"Fee transfer failed!\\\");\\n        \\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);\\n        totalTokens = totalTokens.add(amountAfterFee);\\n\\n        holders.add(msg.sender);\\n        depositTime[msg.sender] = block.timestamp;\\n    }\\n    \\n    function withdraw(uint amountToWithdraw) external noContractsAllowed {\\n        require(amountToWithdraw > 0, \\\"Cannot withdraw 0 Tokens!\\\");\\n        require(block.timestamp.sub(depositTime[msg.sender]) > LOCKUP_TIME, \\\"You recently staked, please wait before withdrawing.\\\");\\n        require(depositedTokens[msg.sender] >= amountToWithdraw, \\\"Invalid amount to withdraw\\\");\\n        \\n        updateAccount(msg.sender);\\n        \\n        uint fee = amountToWithdraw.mul(UNSTAKING_FEE_RATE_X_100).div(100e2);\\n        uint amountAfterFee = amountToWithdraw.sub(fee);\\n        \\n        // require(Token(trustedDepositTokenAddress).transfer(owner, fee), \\\"Fee transfer failed!\\\");\\n        \\n        require(IERC20(trustedDepositTokenAddress).transfer(msg.sender, amountAfterFee), \\\"Could not transfer tokens.\\\");\\n        \\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\\n        totalTokens = totalTokens.sub(amountToWithdraw);\\n        \\n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\\n            holders.remove(msg.sender);\\n        }\\n    }\\n    \\n    // withdraw without caring about Rewards\\n    function emergencyWithdraw(uint amountToWithdraw) external noContractsAllowed {\\n        require(amountToWithdraw > 0, \\\"Cannot withdraw 0 Tokens!\\\");\\n        require(block.timestamp.sub(depositTime[msg.sender]) > LOCKUP_TIME, \\\"You recently staked, please wait before withdrawing.\\\");\\n        require(depositedTokens[msg.sender] >= amountToWithdraw, \\\"Invalid amount to withdraw\\\");\\n        \\n        // manual update account here without withdrawing pending rewards\\n        disburseTokens();\\n        lastClaimedTime[msg.sender] = block.timestamp;\\n        lastDivPoints[msg.sender] = totalDivPoints;\\n        \\n        uint fee = amountToWithdraw.mul(UNSTAKING_FEE_RATE_X_100).div(100e2);\\n        uint amountAfterFee = amountToWithdraw.sub(fee);\\n        \\n        require(IERC20(trustedDepositTokenAddress).transfer(owner(), fee), \\\"Fee transfer failed!\\\");\\n        \\n        require(IERC20(trustedDepositTokenAddress).transfer(msg.sender, amountAfterFee), \\\"Could not transfer tokens.\\\");\\n        \\n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\\n        totalTokens = totalTokens.sub(amountToWithdraw);\\n        \\n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\\n            holders.remove(msg.sender);\\n        }\\n    }\\n    \\n    function claim() public {\\n        updateAccount(msg.sender);\\n    }\\n    \\n    function disburseTokens() private {\\n        uint amount = getPendingDisbursement();\\n\\n        if (contractBalance < amount) {\\n            amount = contractBalance;\\n        }\\n        if (amount == 0 || totalTokens == 0) return;\\n        \\n        totalDivPoints = totalDivPoints.add(amount.mul(pointMultiplier).div(totalTokens));\\n        totalTokensDisbursed = totalTokensDisbursed.add(amount);\\n        emit RewardsDisbursed(amount);\\n        \\n        contractBalance = contractBalance.sub(amount);\\n        lastDisburseTime = block.timestamp;\\n        \\n    }\\n    \\n    function getPendingDisbursement() public view returns (uint) {\\n        uint timeDiff;\\n        uint _now = block.timestamp;\\n        uint _stakingEndTime = contractDeployTime.add(disburseDuration);\\n        if (_now > _stakingEndTime) {\\n            _now = _stakingEndTime;\\n        }\\n        if (lastDisburseTime >= _now) {\\n            timeDiff = 0;\\n        } else {\\n            timeDiff = _now.sub(lastDisburseTime);   \\n        }\\n        \\n        uint pendingDisburse = disburseAmount\\n                                    .mul(disbursePercentX100)\\n                                    .mul(timeDiff)\\n                                    .div(disburseDuration)\\n                                    .div(10000);\\n        return pendingDisburse;\\n    }\\n    \\n    function getHoldersList(uint startIndex, uint endIndex) \\n        public \\n        view \\n        returns (address[] memory stakers, \\n            uint[] memory stakingTimestamps, \\n            uint[] memory lastClaimedTimeStamps,\\n            uint[] memory stakedTokens) {\\n        require (startIndex < endIndex);\\n        \\n        uint length = endIndex.sub(startIndex);\\n        address[] memory _stakers = new address[](length);\\n        uint[] memory _stakingTimestamps = new uint[](length);\\n        uint[] memory _lastClaimedTimeStamps = new uint[](length);\\n        uint[] memory _stakedTokens = new uint[](length);\\n        \\n        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\\n            address staker = holders.at(i);\\n            uint listIndex = i.sub(startIndex);\\n            _stakers[listIndex] = staker;\\n            _stakingTimestamps[listIndex] = depositTime[staker];\\n            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];\\n            _stakedTokens[listIndex] = depositedTokens[staker];\\n        }\\n        \\n        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);\\n    }\\n    \\n\\n    // function to allow owner to claim *other* modern ERC20 tokens sent to this contract\\n    function transferAnyERC20Token(address _tokenAddr, address _to, uint _amount) public onlyOwner {\\n        \\n        require(_tokenAddr != trustedDepositTokenAddress, \\\"Admin cannot transfer out deposit tokens from this vault!\\\");\\n        require((_tokenAddr != trustedRewardTokenAddress) || (block.timestamp > adminClaimableTime), \\\"Admin cannot Transfer out Reward Tokens Yet!\\\");\\n        require(IERC20(_tokenAddr).transfer(_to, _amount), \\\"Could not transfer out tokens!\\\");\\n    }\\n    \\n    // function to allow owner to claim *other* modern ERC20 tokens sent to this contract\\n    function transferAnyOldERC20Token(address _tokenAddr, address _to, uint _amount) public onlyOwner {\\n        \\n        require(_tokenAddr != trustedDepositTokenAddress, \\\"Admin cannot transfer out deposit tokens from this vault!\\\");\\n        require((_tokenAddr != trustedRewardTokenAddress) || (block.timestamp > adminClaimableTime), \\\"Admin cannot Transfer out Reward Tokens Yet!\\\");\\n        \\n        IERC20(_tokenAddr).transfer(_to, _amount);\\n    }\\n}\",\"keccak256\":\"0x1fa3ef9ac17b67503032961b5b0291150be5a4c07b46404dc8c07f030131c333\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x6080604052600180546001600160a01b0319908116735799f00453ef2bc63ed57bbe84b1e9c9416b1b141790915560028054909116734995e2fb10cd739a8f2b903686d72b16a222e114179055690218ae196b8d4f30000060035562ed4e00600455630107ac006005556127106006556000600a819055601281905560138190556014819055601555670de0b6b3a7640000601655348015620000a157600080fd5b50620000ad33620000e1565b42600781905550620000d26005546007546200013160201b620013d11790919060201c565b6008556007546009556200016d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006200013f828462000146565b9392505050565b600082198211156200016857634e487b7160e01b600052601160045260246000fd5b500190565b611ca4806200017d6000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80638da5cb5b11610130578063ca7e0835116100b8578063ed3e91741161007c578063ed3e917414610443578063f2fde38b14610456578063f3f91fa014610469578063f5326ada14610489578063fe547f721461049357600080fd5b8063ca7e08351461040c578063d493b9ac14610415578063d578ceab14610428578063d7130e1414610431578063e027c61f1461043a57600080fd5b80639f54790d116100ff5780639f54790d146103c8578063ac51de8d146103d1578063b6b55f25146103d9578063c1665f4014610381578063c326bf4f146103ec57600080fd5b80638da5cb5b146103925780638e20a1d9146103a35780638f5705be146103ac57806398896d10146103b557600080fd5b806346c64873116101b357806365ca78be1161018257806365ca78be14610367578063715018a6146103705780637e1c0c09146103785780637e44b933146103815780638b7afe2e1461038957600080fd5b806346c648731461030c5780634e71d92d1461032c5780635312ea8e146103345780636270cd181461034757600080fd5b8063308feec3116101fa578063308feec3146102a857806331045226146102b057806331a5dda1146102c357806335ad0cea146102d6578063452b4cfc146102f957600080fd5b80630c9a0c781461022c5780631cfa8021146102485780631f04461c146102735780632e1a7d4d14610293575b600080fd5b61023560065481565b6040519081526020015b60405180910390f35b60015461025b906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b6102356102813660046118fa565b60116020526000908152604090205481565b6102a66102a1366004611915565b61049c565b005b61023561072e565b6102356102be3660046118fa565b61073f565b60025461025b906001600160a01b031681565b6102e96102e436600461192e565b6107cd565b60405161023f949392919061198b565b6102a6610307366004611915565b610a55565b61023561031a3660046118fa565b600e6020526000908152604090205481565b6102a6610b3c565b6102a6610342366004611915565b610b47565b6102356103553660046118fa565b60106020526000908152604090205481565b61023560125481565b6102a6610dc0565b61023560155481565b610235603281565b61023560135481565b6000546001600160a01b031661025b565b61023560145481565b61023560045481565b6102356103c33660046118fa565b610dd2565b61023560075481565b610235610e6c565b6102a66103e7366004611915565b610ee4565b6102356103fa3660046118fa565b600d6020526000908152604090205481565b61023560085481565b6102a6610423366004611a15565b611128565b610235600a5481565b61023560055481565b61023560095481565b6102a6610451366004611a15565b611266565b6102a66104643660046118fa565b611358565b6102356104773660046118fa565b600f6020526000908152604090205481565b61023562278d0081565b61023560035481565b333b1580156104aa57503233145b6104cf5760405162461bcd60e51b81526004016104c690611a51565b60405180910390fd5b6000811161051b5760405162461bcd60e51b815260206004820152601960248201527843616e6e6f74207769746864726177203020546f6b656e732160381b60448201526064016104c6565b336000908152600e602052604090205462278d009061053b9042906113e6565b116105585760405162461bcd60e51b81526004016104c690611a80565b336000908152600d60205260409020548111156105b75760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420616d6f756e7420746f20776974686472617700000000000060448201526064016104c6565b6105c0336113f2565b60006105d96127106105d384603261159a565b906115a6565b905060006105e783836113e6565b60015460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044015b602060405180830381600087803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190611ad4565b6106b95760405162461bcd60e51b815260206004820152601a60248201527f436f756c64206e6f74207472616e7366657220746f6b656e732e00000000000060448201526064016104c6565b336000908152600d60205260409020546106d390846113e6565b336000908152600d60205260409020556015546106f090846113e6565b6015556106fe600b336115b2565b80156107175750336000908152600d6020526040902054155b1561072957610727600b336115d4565b505b505050565b600061073a600b6115e9565b905090565b60008061074b83610dd2565b90506000610757610e6c565b905080601354101561076857506013545b6001600160a01b0384166000908152600d60205260409020548061079157506000949350505050565b6015546107a357506000949350505050565b6015546000906107b7906105d3848661159a565b90506107c384826113d1565b9695505050505050565b6060806060808486106107df57600080fd5b60006107eb86886113e6565b905060008167ffffffffffffffff81111561080857610808611afd565b604051908082528060200260200182016040528015610831578160200160208202803683370190505b50905060008267ffffffffffffffff81111561084f5761084f611afd565b604051908082528060200260200182016040528015610878578160200160208202803683370190505b50905060008367ffffffffffffffff81111561089657610896611afd565b6040519080825280602002602001820160405280156108bf578160200160208202803683370190505b50905060008467ffffffffffffffff8111156108dd576108dd611afd565b604051908082528060200260200182016040528015610906578160200160208202803683370190505b5090508a5b8a811015610a43576000610920600b836115f3565b9050600061092e838f6113e6565b90508187828151811061094357610943611b13565b60200260200101906001600160a01b031690816001600160a01b031681525050600e6000836001600160a01b03166001600160a01b031681526020019081526020016000205486828151811061099b5761099b611b13565b602002602001018181525050600f6000836001600160a01b03166001600160a01b03168152602001908152602001600020548582815181106109df576109df611b13565b602002602001018181525050600d6000836001600160a01b03166001600160a01b0316815260200190815260200160002054848281518110610a2357610a23611b13565b602090810291909101015250610a3c90508160016113d1565b905061090b565b50929a91995097509095509350505050565b610a5d6115ff565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610aaf57600080fd5b505af1158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae79190611ad4565b610b295760405162461bcd60e51b815260206004820152601360248201527243616e6e6f74206164642062616c616e63652160681b60448201526064016104c6565b601354610b3690826113d1565b60135550565b610b45336113f2565b565b333b158015610b5557503233145b610b715760405162461bcd60e51b81526004016104c690611a51565b60008111610bbd5760405162461bcd60e51b815260206004820152601960248201527843616e6e6f74207769746864726177203020546f6b656e732160381b60448201526064016104c6565b336000908152600e602052604090205462278d0090610bdd9042906113e6565b11610bfa5760405162461bcd60e51b81526004016104c690611a80565b336000908152600d6020526040902054811115610c595760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420616d6f756e7420746f20776974686472617700000000000060448201526064016104c6565b610c61611659565b336000908152600f602090815260408083204290556014546011909252822055610c926127106105d384603261159a565b90506000610ca083836113e6565b6001549091506001600160a01b031663a9059cbb610cc66000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d469190611ad4565b610d895760405162461bcd60e51b8152602060048201526014602482015273466565207472616e73666572206661696c65642160601b60448201526064016104c6565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb9060440161061b565b610dc86115ff565b610b45600061170d565b6000610ddf600b836115b2565b610deb57506000919050565b6001600160a01b0382166000908152600d6020526040902054610e1057506000919050565b6001600160a01b038216600090815260116020526040812054601454610e35916113e6565b6001600160a01b0384166000908152600d602052604081205460165492935091610e63906105d3848661159a565b95945050505050565b600454600754600091829142918391610e84916113d1565b905080821115610e92578091505b8160095410610ea45760009250610eb5565b600954610eb29083906113e6565b92505b6000610e636127106105d36004546105d388610ede60065460035461159a90919063ffffffff16565b9061159a565b333b158015610ef257503233145b610f0e5760405162461bcd60e51b81526004016104c690611a51565b600454600754610f1d916113d1565b610f2a4262278d006113d1565b1115610f785760405162461bcd60e51b815260206004820152601860248201527f4465706f736974732061726520636c6f736564206e6f7721000000000000000060448201526064016104c6565b60008111610fc85760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74206465706f736974203020546f6b656e7300000000000000000060448201526064016104c6565b610fd1336113f2565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190611ad4565b6110a75760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e7420546f6b656e20416c6c6f77616e63650000000060448201526064016104c6565b60006110ba6127106105d384603261159a565b905060006110c883836113e6565b336000908152600d60205260409020549091506110e590826113d1565b336000908152600d602052604090205560155461110290826113d1565b601555611110600b3361175d565b5050336000908152600e602052604090204290555050565b6111306115ff565b6001546001600160a01b038481169116141561115e5760405162461bcd60e51b81526004016104c690611b29565b6002546001600160a01b03848116911614158061117c575060085442115b6111985760405162461bcd60e51b81526004016104c690611b86565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b1580156111e257600080fd5b505af11580156111f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121a9190611ad4565b6107295760405162461bcd60e51b815260206004820152601e60248201527f436f756c64206e6f74207472616e73666572206f757420746f6b656e7321000060448201526064016104c6565b61126e6115ff565b6001546001600160a01b038481169116141561129c5760405162461bcd60e51b81526004016104c690611b29565b6002546001600160a01b0384811691161415806112ba575060085442115b6112d65760405162461bcd60e51b81526004016104c690611b86565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561132057600080fd5b505af1158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190611ad4565b6113606115ff565b6001600160a01b0381166113c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104c6565b6113ce8161170d565b50565b60006113dd8284611be8565b90505b92915050565b60006113dd8284611c00565b6113fa611659565b600061140582610dd2565b9050801561156e5760025460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561145b57600080fd5b505af115801561146f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114939190611ad4565b6114df5760405162461bcd60e51b815260206004820152601a60248201527f436f756c64206e6f74207472616e7366657220746f6b656e732e00000000000060448201526064016104c6565b6001600160a01b03821660009081526010602052604090205461150290826113d1565b6001600160a01b038316600090815260106020526040902055600a5461152890826113d1565b600a55604080516001600160a01b0384168152602081018390527f586b2e63a21a7a4e1402e36f48ce10cb1ec94684fea254c186b76d1f98ecf130910160405180910390a15b506001600160a01b03166000908152600f60209081526040808320429055601454601190925290912055565b60006113dd8284611c17565b60006113dd8284611c36565b6001600160a01b038116600090815260018301602052604081205415156113dd565b60006113dd836001600160a01b038416611772565b60006113e0825490565b60006113dd8383611865565b6000546001600160a01b03163314610b455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c6565b6000611663610e6c565b905080601354101561167457506013545b8015806116815750601554155b156116895750565b6116b06116a76015546105d36016548561159a90919063ffffffff16565b601454906113d1565b6014556012546116c090826113d1565b6012556040518181527f497e6c34cb46390a801e970e8c72fd87aa7fded87c9b77cdac588f235904a8259060200160405180910390a160135461170390826113e6565b6013555042600955565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006113dd836001600160a01b03841661188f565b6000818152600183016020526040812054801561185b576000611796600183611c00565b85549091506000906117aa90600190611c00565b905081811461180f5760008660000182815481106117ca576117ca611b13565b90600052602060002001549050808760000184815481106117ed576117ed611b13565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061182057611820611c58565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506113e0565b60009150506113e0565b600082600001828154811061187c5761187c611b13565b9060005260206000200154905092915050565b60008181526001830160205260408120546118d6575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556113e0565b5060006113e0565b80356001600160a01b03811681146118f557600080fd5b919050565b60006020828403121561190c57600080fd5b6113dd826118de565b60006020828403121561192757600080fd5b5035919050565b6000806040838503121561194157600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101561198057815187529582019590820190600101611964565b509495945050505050565b6080808252855190820181905260009060209060a0840190828901845b828110156119cd5781516001600160a01b0316845292840192908401906001016119a8565b505050838103828501526119e18188611950565b91505082810360408401526119f68186611950565b90508281036060840152611a0a8185611950565b979650505050505050565b600080600060608486031215611a2a57600080fd5b611a33846118de565b9250611a41602085016118de565b9150604084013590509250925092565b6020808252601590820152744e6f20436f6e74726163747320416c6c6f7765642160581b604082015260600190565b60208082526034908201527f596f7520726563656e746c79207374616b65642c20706c656173652077616974604082015273103132b337b932903bb4ba34323930bbb4b7339760611b606082015260800190565b600060208284031215611ae657600080fd5b81518015158114611af657600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60208082526039908201527f41646d696e2063616e6e6f74207472616e73666572206f7574206465706f736960408201527f7420746f6b656e732066726f6d2074686973207661756c742100000000000000606082015260800190565b6020808252602c908201527f41646d696e2063616e6e6f74205472616e73666572206f75742052657761726460408201526b20546f6b656e73205965742160a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611bfb57611bfb611bd2565b500190565b600082821015611c1257611c12611bd2565b500390565b6000816000190483118215151615611c3157611c31611bd2565b500290565b600082611c5357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fdfea264697066735822122020f013c47bd05c76e088c994bcef859f5f9c2e520af2b2a7fb896bfebdfcb3ff64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80638da5cb5b11610130578063ca7e0835116100b8578063ed3e91741161007c578063ed3e917414610443578063f2fde38b14610456578063f3f91fa014610469578063f5326ada14610489578063fe547f721461049357600080fd5b8063ca7e08351461040c578063d493b9ac14610415578063d578ceab14610428578063d7130e1414610431578063e027c61f1461043a57600080fd5b80639f54790d116100ff5780639f54790d146103c8578063ac51de8d146103d1578063b6b55f25146103d9578063c1665f4014610381578063c326bf4f146103ec57600080fd5b80638da5cb5b146103925780638e20a1d9146103a35780638f5705be146103ac57806398896d10146103b557600080fd5b806346c64873116101b357806365ca78be1161018257806365ca78be14610367578063715018a6146103705780637e1c0c09146103785780637e44b933146103815780638b7afe2e1461038957600080fd5b806346c648731461030c5780634e71d92d1461032c5780635312ea8e146103345780636270cd181461034757600080fd5b8063308feec3116101fa578063308feec3146102a857806331045226146102b057806331a5dda1146102c357806335ad0cea146102d6578063452b4cfc146102f957600080fd5b80630c9a0c781461022c5780631cfa8021146102485780631f04461c146102735780632e1a7d4d14610293575b600080fd5b61023560065481565b6040519081526020015b60405180910390f35b60015461025b906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b6102356102813660046118fa565b60116020526000908152604090205481565b6102a66102a1366004611915565b61049c565b005b61023561072e565b6102356102be3660046118fa565b61073f565b60025461025b906001600160a01b031681565b6102e96102e436600461192e565b6107cd565b60405161023f949392919061198b565b6102a6610307366004611915565b610a55565b61023561031a3660046118fa565b600e6020526000908152604090205481565b6102a6610b3c565b6102a6610342366004611915565b610b47565b6102356103553660046118fa565b60106020526000908152604090205481565b61023560125481565b6102a6610dc0565b61023560155481565b610235603281565b61023560135481565b6000546001600160a01b031661025b565b61023560145481565b61023560045481565b6102356103c33660046118fa565b610dd2565b61023560075481565b610235610e6c565b6102a66103e7366004611915565b610ee4565b6102356103fa3660046118fa565b600d6020526000908152604090205481565b61023560085481565b6102a6610423366004611a15565b611128565b610235600a5481565b61023560055481565b61023560095481565b6102a6610451366004611a15565b611266565b6102a66104643660046118fa565b611358565b6102356104773660046118fa565b600f6020526000908152604090205481565b61023562278d0081565b61023560035481565b333b1580156104aa57503233145b6104cf5760405162461bcd60e51b81526004016104c690611a51565b60405180910390fd5b6000811161051b5760405162461bcd60e51b815260206004820152601960248201527843616e6e6f74207769746864726177203020546f6b656e732160381b60448201526064016104c6565b336000908152600e602052604090205462278d009061053b9042906113e6565b116105585760405162461bcd60e51b81526004016104c690611a80565b336000908152600d60205260409020548111156105b75760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420616d6f756e7420746f20776974686472617700000000000060448201526064016104c6565b6105c0336113f2565b60006105d96127106105d384603261159a565b906115a6565b905060006105e783836113e6565b60015460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044015b602060405180830381600087803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190611ad4565b6106b95760405162461bcd60e51b815260206004820152601a60248201527f436f756c64206e6f74207472616e7366657220746f6b656e732e00000000000060448201526064016104c6565b336000908152600d60205260409020546106d390846113e6565b336000908152600d60205260409020556015546106f090846113e6565b6015556106fe600b336115b2565b80156107175750336000908152600d6020526040902054155b1561072957610727600b336115d4565b505b505050565b600061073a600b6115e9565b905090565b60008061074b83610dd2565b90506000610757610e6c565b905080601354101561076857506013545b6001600160a01b0384166000908152600d60205260409020548061079157506000949350505050565b6015546107a357506000949350505050565b6015546000906107b7906105d3848661159a565b90506107c384826113d1565b9695505050505050565b6060806060808486106107df57600080fd5b60006107eb86886113e6565b905060008167ffffffffffffffff81111561080857610808611afd565b604051908082528060200260200182016040528015610831578160200160208202803683370190505b50905060008267ffffffffffffffff81111561084f5761084f611afd565b604051908082528060200260200182016040528015610878578160200160208202803683370190505b50905060008367ffffffffffffffff81111561089657610896611afd565b6040519080825280602002602001820160405280156108bf578160200160208202803683370190505b50905060008467ffffffffffffffff8111156108dd576108dd611afd565b604051908082528060200260200182016040528015610906578160200160208202803683370190505b5090508a5b8a811015610a43576000610920600b836115f3565b9050600061092e838f6113e6565b90508187828151811061094357610943611b13565b60200260200101906001600160a01b031690816001600160a01b031681525050600e6000836001600160a01b03166001600160a01b031681526020019081526020016000205486828151811061099b5761099b611b13565b602002602001018181525050600f6000836001600160a01b03166001600160a01b03168152602001908152602001600020548582815181106109df576109df611b13565b602002602001018181525050600d6000836001600160a01b03166001600160a01b0316815260200190815260200160002054848281518110610a2357610a23611b13565b602090810291909101015250610a3c90508160016113d1565b905061090b565b50929a91995097509095509350505050565b610a5d6115ff565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b158015610aaf57600080fd5b505af1158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae79190611ad4565b610b295760405162461bcd60e51b815260206004820152601360248201527243616e6e6f74206164642062616c616e63652160681b60448201526064016104c6565b601354610b3690826113d1565b60135550565b610b45336113f2565b565b333b158015610b5557503233145b610b715760405162461bcd60e51b81526004016104c690611a51565b60008111610bbd5760405162461bcd60e51b815260206004820152601960248201527843616e6e6f74207769746864726177203020546f6b656e732160381b60448201526064016104c6565b336000908152600e602052604090205462278d0090610bdd9042906113e6565b11610bfa5760405162461bcd60e51b81526004016104c690611a80565b336000908152600d6020526040902054811115610c595760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420616d6f756e7420746f20776974686472617700000000000060448201526064016104c6565b610c61611659565b336000908152600f602090815260408083204290556014546011909252822055610c926127106105d384603261159a565b90506000610ca083836113e6565b6001549091506001600160a01b031663a9059cbb610cc66000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101859052604401602060405180830381600087803b158015610d0e57600080fd5b505af1158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d469190611ad4565b610d895760405162461bcd60e51b8152602060048201526014602482015273466565207472616e73666572206661696c65642160601b60448201526064016104c6565b60015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb9060440161061b565b610dc86115ff565b610b45600061170d565b6000610ddf600b836115b2565b610deb57506000919050565b6001600160a01b0382166000908152600d6020526040902054610e1057506000919050565b6001600160a01b038216600090815260116020526040812054601454610e35916113e6565b6001600160a01b0384166000908152600d602052604081205460165492935091610e63906105d3848661159a565b95945050505050565b600454600754600091829142918391610e84916113d1565b905080821115610e92578091505b8160095410610ea45760009250610eb5565b600954610eb29083906113e6565b92505b6000610e636127106105d36004546105d388610ede60065460035461159a90919063ffffffff16565b9061159a565b333b158015610ef257503233145b610f0e5760405162461bcd60e51b81526004016104c690611a51565b600454600754610f1d916113d1565b610f2a4262278d006113d1565b1115610f785760405162461bcd60e51b815260206004820152601860248201527f4465706f736974732061726520636c6f736564206e6f7721000000000000000060448201526064016104c6565b60008111610fc85760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74206465706f736974203020546f6b656e7300000000000000000060448201526064016104c6565b610fd1336113f2565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190611ad4565b6110a75760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e7420546f6b656e20416c6c6f77616e63650000000060448201526064016104c6565b60006110ba6127106105d384603261159a565b905060006110c883836113e6565b336000908152600d60205260409020549091506110e590826113d1565b336000908152600d602052604090205560155461110290826113d1565b601555611110600b3361175d565b5050336000908152600e602052604090204290555050565b6111306115ff565b6001546001600160a01b038481169116141561115e5760405162461bcd60e51b81526004016104c690611b29565b6002546001600160a01b03848116911614158061117c575060085442115b6111985760405162461bcd60e51b81526004016104c690611b86565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b1580156111e257600080fd5b505af11580156111f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121a9190611ad4565b6107295760405162461bcd60e51b815260206004820152601e60248201527f436f756c64206e6f74207472616e73666572206f757420746f6b656e7321000060448201526064016104c6565b61126e6115ff565b6001546001600160a01b038481169116141561129c5760405162461bcd60e51b81526004016104c690611b29565b6002546001600160a01b0384811691161415806112ba575060085442115b6112d65760405162461bcd60e51b81526004016104c690611b86565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb90604401602060405180830381600087803b15801561132057600080fd5b505af1158015611334573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107279190611ad4565b6113606115ff565b6001600160a01b0381166113c55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104c6565b6113ce8161170d565b50565b60006113dd8284611be8565b90505b92915050565b60006113dd8284611c00565b6113fa611659565b600061140582610dd2565b9050801561156e5760025460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561145b57600080fd5b505af115801561146f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114939190611ad4565b6114df5760405162461bcd60e51b815260206004820152601a60248201527f436f756c64206e6f74207472616e7366657220746f6b656e732e00000000000060448201526064016104c6565b6001600160a01b03821660009081526010602052604090205461150290826113d1565b6001600160a01b038316600090815260106020526040902055600a5461152890826113d1565b600a55604080516001600160a01b0384168152602081018390527f586b2e63a21a7a4e1402e36f48ce10cb1ec94684fea254c186b76d1f98ecf130910160405180910390a15b506001600160a01b03166000908152600f60209081526040808320429055601454601190925290912055565b60006113dd8284611c17565b60006113dd8284611c36565b6001600160a01b038116600090815260018301602052604081205415156113dd565b60006113dd836001600160a01b038416611772565b60006113e0825490565b60006113dd8383611865565b6000546001600160a01b03163314610b455760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104c6565b6000611663610e6c565b905080601354101561167457506013545b8015806116815750601554155b156116895750565b6116b06116a76015546105d36016548561159a90919063ffffffff16565b601454906113d1565b6014556012546116c090826113d1565b6012556040518181527f497e6c34cb46390a801e970e8c72fd87aa7fded87c9b77cdac588f235904a8259060200160405180910390a160135461170390826113e6565b6013555042600955565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006113dd836001600160a01b03841661188f565b6000818152600183016020526040812054801561185b576000611796600183611c00565b85549091506000906117aa90600190611c00565b905081811461180f5760008660000182815481106117ca576117ca611b13565b90600052602060002001549050808760000184815481106117ed576117ed611b13565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061182057611820611c58565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506113e0565b60009150506113e0565b600082600001828154811061187c5761187c611b13565b9060005260206000200154905092915050565b60008181526001830160205260408120546118d6575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556113e0565b5060006113e0565b80356001600160a01b03811681146118f557600080fd5b919050565b60006020828403121561190c57600080fd5b6113dd826118de565b60006020828403121561192757600080fd5b5035919050565b6000806040838503121561194157600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b8381101561198057815187529582019590820190600101611964565b509495945050505050565b6080808252855190820181905260009060209060a0840190828901845b828110156119cd5781516001600160a01b0316845292840192908401906001016119a8565b505050838103828501526119e18188611950565b91505082810360408401526119f68186611950565b90508281036060840152611a0a8185611950565b979650505050505050565b600080600060608486031215611a2a57600080fd5b611a33846118de565b9250611a41602085016118de565b9150604084013590509250925092565b6020808252601590820152744e6f20436f6e74726163747320416c6c6f7765642160581b604082015260600190565b60208082526034908201527f596f7520726563656e746c79207374616b65642c20706c656173652077616974604082015273103132b337b932903bb4ba34323930bbb4b7339760611b606082015260800190565b600060208284031215611ae657600080fd5b81518015158114611af657600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60208082526039908201527f41646d696e2063616e6e6f74207472616e73666572206f7574206465706f736960408201527f7420746f6b656e732066726f6d2074686973207661756c742100000000000000606082015260800190565b6020808252602c908201527f41646d696e2063616e6e6f74205472616e73666572206f75742052657761726460408201526b20546f6b656e73205965742160a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611bfb57611bfb611bd2565b500190565b600082821015611c1257611c12611bd2565b500390565b6000816000190483118215151615611c3157611c31611bd2565b500290565b600082611c5357634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603160045260246000fdfea264697066735822122020f013c47bd05c76e088c994bcef859f5f9c2e520af2b2a7fb896bfebdfcb3ff64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 446,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4921,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "trustedDepositTokenAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4924,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "trustedRewardTokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4936,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "disburseAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4939,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "disburseDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4942,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "adminCanClaimAfter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4945,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "disbursePercentX100",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4947,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "contractDeployTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4949,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "adminClaimableTime",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4951,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "lastDisburseTime",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4997,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "totalClaimedRewards",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5000,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "holders",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(AddressSet)2443_storage"
      },
      {
        "astId": 5004,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "depositedTokens",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5008,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "depositTime",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5012,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "lastClaimedTime",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5016,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "totalEarnedTokens",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5020,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "lastDivPoints",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5023,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "totalTokensDisbursed",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5026,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "contractBalance",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 5029,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "totalDivPoints",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 5032,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "totalTokens",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 5035,
        "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
        "label": "pointMultiplier",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2443_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2442,
            "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2142_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2142_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2137,
            "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2141,
            "contract": "contracts/JdaiStaking2.sol:JdaiStaking2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}