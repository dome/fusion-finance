{
  "address": "0xC73C12EE968Dee962b4d394A88B94461650D5255",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_baseAssetAddress",
          "type": "address"
        },
        {
          "internalType": "contract RewardToken",
          "name": "_JdaiAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimYield",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Collateralize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Lend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCollateral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawLend",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "JdaiBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "JdaiToken",
      "outputs": [
        {
          "internalType": "contract RewardToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAFF_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAssetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "calculateBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "calculateLiquidationPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "point",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "calculateYieldTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lendingTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "calculateYieldTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getBorrowBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getBorrowingStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getCollateralBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "getEarnedJdaiTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_ethPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "getLendingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "getLendingStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getLiquidationPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staff",
          "type": "address"
        }
      ],
      "name": "grantStaff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isBorrowing",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLending",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staff",
          "type": "address"
        }
      ],
      "name": "revokeStaff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ethPrice",
          "type": "uint256"
        }
      ],
      "name": "setEthPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc53a3bde88144b73af800689ca717b5266af0a2f8a03445d26b484401e34eef0",
  "receipt": {
    "to": null,
    "from": "0x4A4cF4741a96D8e0123a490cA720d84fD9b15bc4",
    "contractAddress": "0xC73C12EE968Dee962b4d394A88B94461650D5255",
    "transactionIndex": 0,
    "gasUsed": "2169522",
    "logsBloom": "0x
    "blockHash": "0x6af2863db6447df95c66a6afd76c6486b7fabaf75906f49dd519bd776966bc1c",
    "transactionHash": "0xc53a3bde88144b73af800689ca717b5266af0a2f8a03445d26b484401e34eef0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2596148,
        "transactionHash": "0xc53a3bde88144b73af800689ca717b5266af0a2f8a03445d26b484401e34eef0",
        "address": "0xC73C12EE968Dee962b4d394A88B94461650D5255",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a4cf4741a96d8e0123a490ca720d84fd9b15bc4"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6af2863db6447df95c66a6afd76c6486b7fabaf75906f49dd519bd776966bc1c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2596148,
        "transactionHash": "0xc53a3bde88144b73af800689ca717b5266af0a2f8a03445d26b484401e34eef0",
        "address": "0xC73C12EE968Dee962b4d394A88B94461650D5255",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a4cf4741a96d8e0123a490ca720d84fd9b15bc4",
          "0x0000000000000000000000004a4cf4741a96d8e0123a490ca720d84fd9b15bc4"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6af2863db6447df95c66a6afd76c6486b7fabaf75906f49dd519bd776966bc1c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2596148,
        "transactionHash": "0xc53a3bde88144b73af800689ca717b5266af0a2f8a03445d26b484401e34eef0",
        "address": "0xC73C12EE968Dee962b4d394A88B94461650D5255",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x5620a1113a72b02a617976b3f6b15600dd7a8b3a916a9ca01e23119d989a0543",
          "0x0000000000000000000000004a4cf4741a96d8e0123a490ca720d84fd9b15bc4",
          "0x0000000000000000000000004a4cf4741a96d8e0123a490ca720d84fd9b15bc4"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x6af2863db6447df95c66a6afd76c6486b7fabaf75906f49dd519bd776966bc1c"
      }
    ],
    "blockNumber": 2596148,
    "cumulativeGasUsed": "2169522",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xebC1aEf281ec1B8e31d44BdE16F80b64Fd7f7508",
    "0xd98c7a4Ab9aeC9f58F9e12aCe7b3FF0fAfa1Aa9f"
  ],
  "numDeployments": 1,
  "solcInputHash": "34f45318469e8bbfee80cb14598b7884",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_baseAssetAddress\",\"type\":\"address\"},{\"internalType\":\"contract RewardToken\",\"name\":\"_JdaiAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimYield\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Collateralize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Lend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawLend\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"JdaiBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JdaiToken\",\"outputs\":[{\"internalType\":\"contract RewardToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAFF_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"calculateBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"calculateLiquidationPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"point\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"calculateYieldTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lendingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"calculateYieldTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getBorrowBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getBorrowingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getCollateralBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"getEarnedJdaiTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"getLendingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"getLendingStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getLiquidationPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staff\",\"type\":\"address\"}],\"name\":\"grantStaff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBorrowing\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staff\",\"type\":\"address\"}],\"name\":\"revokeStaff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethPrice\",\"type\":\"uint256\"}],\"name\":\"setEthPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"John Nguyen (jooohn.eth)\",\"kind\":\"dev\",\"methods\":{\"borrow(uint256)\":{\"details\":\"deducting 0.3% from msg.sender's ETH collateral as protocol's fees\",\"params\":{\"_amount\":\"amount of base asset to borrow\"}},\"calculateBorrowLimit(address)\":{\"returns\":{\"limit\":\"current borrow limit for user\"}},\"calculateYieldTime(address)\":{\"params\":{\"_lender\":\"address of lender\"},\"returns\":{\"lendingTime\":\"amount of time staked by lender\"}},\"calculateYieldTotal(address)\":{\"details\":\"rate = timeStaked / amount of time needed to earn 100% of $FUSN tokens. 31536000 = number of seconds in a year.\",\"params\":{\"_lender\":\"address of lender\"},\"returns\":{\"yield\":\"amount of $FUSN tokens earned by lender\"}},\"constructor\":{\"params\":{\"_JdaiAddress\":\"address of $FUSN token\",\"_baseAssetAddress\":\"address of base asset token\"}},\"getEthPrice()\":{\"returns\":{\"_ethPrice\":\"price of ETH in USD\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"lend(uint256)\":{\"params\":{\"_amount\":\"amount of tokens to lend\"}},\"liquidate(address)\":{\"details\":\"passedLiquidation modifier checks if the borrow position has passed liquidation pointliquidationReward 1.25% of borrower's ETH collateral\",\"params\":{\"_borrower\":\"address of borrower\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"repay(uint256)\":{\"params\":{\"_amount\":\"amount of base asset to repay\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawCollateral(uint256)\":{\"params\":{\"_amount\":\"amount of ETH the user wants to withdraw\"}},\"withdrawLend(uint256)\":{\"params\":{\"_amount\":\"amount of tokens to withdraw\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Lend(address,uint256)\":{\"notice\":\"events emitted after each action.\"}},\"kind\":\"user\",\"methods\":{\"baseAsset()\":{\"notice\":\"declaring token variables.\"},\"borrow(uint256)\":{\"notice\":\"borrows base asset\"},\"calculateBorrowLimit(address)\":{\"notice\":\"calculates the borrow limit depending on the price of ETH and borrow limit rate.\"},\"calculateYieldTime(address)\":{\"notice\":\"calculates amount of time the lender has been lending since the last update.\"},\"calculateYieldTotal(address)\":{\"notice\":\"calculates amount of $FUSN tokens the lender has earned since the last update.\"},\"claimYield()\":{\"notice\":\"claims all yield earned by lender.\"},\"collateralBalance(address)\":{\"notice\":\"mappings needed to keep track of collateral and borrowing\"},\"collateralize()\":{\"notice\":\"collateralizes user's ETH and sets borrow limit\"},\"constructor\":{\"notice\":\"initiating tokens\"},\"getBorrowBalance(address)\":{\"notice\":\"returns amount of base asset borrowed\"},\"getBorrowLimit(address)\":{\"notice\":\"returns amount of base asset available to borrow\"},\"getBorrowingStatus(address)\":{\"notice\":\"returns borrowing status of borrower\"},\"getCollateralBalance(address)\":{\"notice\":\"returns amount of collateralized asset\"},\"getEarnedJdaiTokens(address)\":{\"notice\":\"retuns amount of $FUSN tokens earned\"},\"getEthPrice()\":{\"notice\":\"Function to get latest price of ETH in USD\"},\"getLendingBalance(address)\":{\"notice\":\"returns amount of base asset lent\"},\"getLendingStatus(address)\":{\"notice\":\"returns lending status of lender\"},\"getLiquidationPoint(address)\":{\"notice\":\"returns liquidation point\"},\"lend(uint256)\":{\"notice\":\"lends base asset.\"},\"lendingBalance(address)\":{\"notice\":\"mappings needed to keep track of lending\"},\"liquidate(address)\":{\"notice\":\"liquidates a borrow position\"},\"repay(uint256)\":{\"notice\":\"repays base asset debt\"},\"withdrawCollateral(uint256)\":{\"notice\":\"withdraw user's collateral ETH and recalculates the borrow limit\"},\"withdrawLend(uint256)\":{\"notice\":\"withdraw base asset.\"}},\"notice\":\"Main Jdai Finance contract responsible for lending, collateralizing and borrowing\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/JdaiCore.sol\":\"JdaiCore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/JdaiCore.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./RewardToken.sol\\\";\\n\\n///@notice Main Jdai Finance contract responsible for lending, collateralizing and borrowing\\n///@author John Nguyen (jooohn.eth)\\ncontract JdaiCore is Ownable, AccessControl {\\n    ///@notice events emitted after each action.\\n    event Lend(address indexed lender, uint amount);\\n    event WithdrawLend(address indexed lender, uint amount);\\n    event ClaimYield(address indexed lender, uint amount);\\n    event Collateralize(address indexed borrower, uint amount);\\n    event WithdrawCollateral(address indexed borrower, uint amount);\\n    event Borrow(address indexed borrower, uint amount);\\n    event Repay(address indexed borrower, uint amount);\\n    event Liquidate(address liquidator, uint reward, address indexed borrower);\\n\\n    ///@notice mappings needed to keep track of lending\\n    mapping(address => uint) public lendingBalance;\\n    mapping(address => uint) public JdaiBalance;\\n    mapping(address => uint) public startTime;\\n    mapping(address => bool) public isLending;\\n\\n    ///@notice mappings needed to keep track of collateral and borrowing\\n    mapping(address => uint) public collateralBalance;\\n    mapping(address => uint) public borrowBalance;\\n    mapping(address => bool) public isBorrowing;\\n\\n    ///@notice declaring chainlink's price aggregator.\\n    AggregatorV3Interface internal priceFeed;\\n    address public constant baseAssetAddress =\\n        0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e;\\n\\n    ///@notice declaring token variables.\\n    IERC20 public immutable baseAsset;\\n    RewardToken public immutable JdaiToken;\\n\\n    bytes32 public constant STAFF_ROLE = keccak256(\\\"STAFF_ROLE\\\");\\n    uint public ethPrice;\\n\\n    ///@notice initiating tokens\\n    ///@param _baseAssetAddress address of base asset token\\n    ///@param _JdaiAddress address of $FUSN token\\n    constructor(IERC20 _baseAssetAddress, RewardToken _JdaiAddress) {\\n        baseAsset = _baseAssetAddress;\\n        JdaiToken = _JdaiAddress;\\n        priceFeed = AggregatorV3Interface(baseAssetAddress);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(STAFF_ROLE, msg.sender);\\n    }\\n\\n    modifier onlyStaff() {\\n        require(hasRole(STAFF_ROLE, msg.sender), \\\"Caller is not a staff\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(\\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"Caller is not a staff\\\"\\n        );\\n        _;\\n    }\\n\\n    function grantStaff(address staff) external onlyAdmin {\\n        grantRole(STAFF_ROLE, staff);\\n    }\\n\\n    function revokeStaff(address staff) external onlyAdmin {\\n        revokeRole(STAFF_ROLE, staff);\\n    }\\n\\n    function setEthPrice(uint _ethPrice) external onlyStaff {\\n        ethPrice = _ethPrice;\\n    }\\n\\n    ///@notice checks if the borrow position has passed the liquidation point\\n    ///@dev added 'virtual' identifier for MockCore to override\\n    modifier passedLiquidation(address _borrower) virtual {\\n        uint _ethPrice = getEthPrice();\\n        require(\\n            (_ethPrice * collateralBalance[_borrower]) <=\\n                calculateLiquidationPoint(_borrower),\\n            \\\"Position can't be liquidated!\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@notice Function to get latest price of ETH in USD\\n    ///@return _ethPrice price of ETH in USD\\n    function getEthPrice() public view returns (uint _ethPrice) {\\n        _ethPrice = uint(ethPrice) / 10**8;\\n    }\\n\\n    ///@notice calculates amount of time the lender has been lending since the last update.\\n    ///@param _lender address of lender\\n    ///@return lendingTime amount of time staked by lender\\n    function calculateYieldTime(address _lender)\\n        public\\n        view\\n        returns (uint lendingTime)\\n    {\\n        lendingTime = block.timestamp - startTime[_lender];\\n    }\\n\\n    ///@notice calculates amount of $FUSN tokens the lender has earned since the last update.\\n    ///@dev rate = timeStaked / amount of time needed to earn 100% of $FUSN tokens. 31536000 = number of seconds in a year.\\n    ///@param _lender address of lender\\n    ///@return yield amount of $FUSN tokens earned by lender\\n    function calculateYieldTotal(address _lender)\\n        public\\n        view\\n        returns (uint yield)\\n    {\\n        uint timeStaked = calculateYieldTime(_lender) * 10**18;\\n        uint rate = timeStaked / 31536000;\\n        yield = (lendingBalance[_lender] * rate) / 10**18;\\n    }\\n\\n    ///@notice calculates the borrow limit depending on the price of ETH and borrow limit rate.\\n    ///@return limit current borrow limit for user\\n    function calculateBorrowLimit(address _borrower)\\n        public\\n        view\\n        returns (uint limit)\\n    {\\n        uint _ethPrice = getEthPrice();\\n        limit =\\n            ((((_ethPrice * collateralBalance[_borrower]) / 100) * 70)) -\\n            borrowBalance[_borrower];\\n    }\\n\\n    function calculateLiquidationPoint(address _borrower)\\n        public\\n        view\\n        returns (uint point)\\n    {\\n        point =\\n            borrowBalance[_borrower] +\\n            ((borrowBalance[_borrower] / 100) * 10);\\n    }\\n\\n    ///@notice lends base asset.\\n    ///@param _amount amount of tokens to lend\\n    function lend(uint _amount) public {\\n        require(_amount > 0, \\\"Can't lend amount: 0!\\\");\\n        require(\\n            baseAsset.balanceOf(msg.sender) >= _amount,\\n            \\\"Insufficient balance!\\\"\\n        );\\n\\n        if (isLending[msg.sender]) {\\n            uint yield = calculateYieldTotal(msg.sender);\\n            JdaiBalance[msg.sender] += yield;\\n        }\\n\\n        lendingBalance[msg.sender] += _amount;\\n        startTime[msg.sender] = block.timestamp;\\n        isLending[msg.sender] = true;\\n\\n        require(\\n            baseAsset.transferFrom(msg.sender, address(this), _amount),\\n            \\\"Transaction failed!\\\"\\n        );\\n\\n        emit Lend(msg.sender, _amount);\\n    }\\n\\n    ///@notice withdraw base asset.\\n    ///@param _amount amount of tokens to withdraw\\n    function withdrawLend(uint _amount) public {\\n        require(isLending[msg.sender], \\\"Can't withdraw before lending!\\\");\\n        require(\\n            lendingBalance[msg.sender] >= _amount,\\n            \\\"Insufficient lending balance!\\\"\\n        );\\n\\n        uint yield = calculateYieldTotal(msg.sender);\\n        startTime[msg.sender] = block.timestamp;\\n        uint withdrawAmount = _amount;\\n        _amount = 0;\\n        lendingBalance[msg.sender] -= withdrawAmount;\\n\\n        require(\\n            baseAsset.transfer(msg.sender, withdrawAmount),\\n            \\\"Transaction failed!\\\"\\n        );\\n        JdaiBalance[msg.sender] += yield;\\n\\n        if (lendingBalance[msg.sender] == 0) {\\n            isLending[msg.sender] = false;\\n        }\\n\\n        emit WithdrawLend(msg.sender, withdrawAmount);\\n    }\\n\\n    ///@notice claims all yield earned by lender.\\n    function claimYield() public {\\n        uint yield = calculateYieldTotal(msg.sender);\\n\\n        require(\\n            yield > 0 || JdaiBalance[msg.sender] > 0,\\n            \\\"No, $ tokens earned!\\\"\\n        );\\n\\n        if (JdaiBalance[msg.sender] != 0) {\\n            uint oldYield = JdaiBalance[msg.sender];\\n            JdaiBalance[msg.sender] = 0;\\n            yield += oldYield;\\n        }\\n\\n        startTime[msg.sender] = block.timestamp;\\n        JdaiToken.mint(msg.sender, yield);\\n\\n        emit ClaimYield(msg.sender, yield);\\n    }\\n\\n    ///@notice collateralizes user's ETH and sets borrow limit\\n    function collateralize() public payable {\\n        require(msg.value > 0, \\\"Can't collaterlize ETH amount: 0!\\\");\\n\\n        collateralBalance[msg.sender] += msg.value;\\n\\n        emit Collateralize(msg.sender, msg.value);\\n    }\\n\\n    ///@notice withdraw user's collateral ETH and recalculates the borrow limit\\n    ///@param _amount amount of ETH the user wants to withdraw\\n    function withdrawCollateral(uint _amount) public {\\n        require(\\n            collateralBalance[msg.sender] >= _amount,\\n            \\\"Not enough collateral to withdraw!\\\"\\n        );\\n        require(\\n            !isBorrowing[msg.sender],\\n            \\\"Can't withdraw collateral while borrowing!\\\"\\n        );\\n\\n        collateralBalance[msg.sender] -= _amount;\\n\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Transaction Failed!\\\");\\n\\n        emit WithdrawCollateral(msg.sender, _amount);\\n    }\\n\\n    ///@notice borrows base asset\\n    ///@param _amount amount of base asset to borrow\\n    ///@dev deducting 0.3% from msg.sender's ETH collateral as protocol's fees\\n    function borrow(uint _amount) public {\\n        collateralBalance[msg.sender] -=\\n            (collateralBalance[msg.sender] / 1000) *\\n            3;\\n\\n        require(collateralBalance[msg.sender] > 0, \\\"No ETH collateralized!\\\");\\n        require(\\n            calculateBorrowLimit(msg.sender) >= _amount,\\n            \\\"Borrow amount exceeds borrow limit!\\\"\\n        );\\n\\n        isBorrowing[msg.sender] = true;\\n        borrowBalance[msg.sender] += _amount;\\n        uint _amountTransfer = _amount - ((_amount / 1000) * 3);\\n        require(baseAsset.transfer(msg.sender, _amountTransfer), \\\"Transaction failed!\\\");\\n\\n        emit Borrow(msg.sender, _amount);\\n    }\\n\\n    ///@notice repays base asset debt\\n    ///@param _amount amount of base asset to repay\\n    function repay(uint _amount) public {\\n        require(isBorrowing[msg.sender], \\\"Can't repay before borrowing!\\\");\\n        require(\\n            baseAsset.balanceOf(msg.sender) >= _amount,\\n            \\\"Insufficient funds!\\\"\\n        );\\n        require(\\n            _amount > 0 && _amount <= borrowBalance[msg.sender],\\n            \\\"Can't repay amount: 0 or more than amount borrowed!\\\"\\n        );\\n\\n        if (_amount == borrowBalance[msg.sender]) {\\n            isBorrowing[msg.sender] = false;\\n        }\\n\\n        borrowBalance[msg.sender] -= _amount;\\n\\n        require(\\n            baseAsset.transferFrom(msg.sender, address(this), _amount),\\n            \\\"Transaction Failed!\\\"\\n        );\\n\\n        emit Repay(msg.sender, _amount);\\n    }\\n\\n    ///@notice liquidates a borrow position\\n    ///@param _borrower address of borrower\\n    ///@dev passedLiquidation modifier checks if the borrow position has passed liquidation point\\n    ///@dev liquidationReward 1.25% of borrower's ETH collateral\\n    function liquidate(address _borrower) public passedLiquidation(_borrower) {\\n        require(isBorrowing[_borrower], \\\"This address is not borrowing!\\\");\\n\\n        uint liquidationReward = (collateralBalance[_borrower] / 10000) * 125;\\n\\n        collateralBalance[_borrower] = 0;\\n        borrowBalance[_borrower] = 0;\\n        isBorrowing[_borrower] = false;\\n\\n        (bool success, ) = msg.sender.call{value: liquidationReward}(\\\"\\\");\\n        require(success, \\\"Transaction Failed!\\\");\\n\\n        emit Liquidate(msg.sender, liquidationReward, _borrower);\\n    }\\n\\n    ///@notice returns lending status of lender\\n    function getLendingStatus(address _lender) external view returns (bool) {\\n        return isLending[_lender];\\n    }\\n\\n    ///@notice retuns amount of $FUSN tokens earned\\n    function getEarnedJdaiTokens(address _lender) external view returns (uint) {\\n        return JdaiBalance[_lender] + calculateYieldTotal(_lender);\\n    }\\n\\n    ///@notice returns amount of base asset lent\\n    function getLendingBalance(address _lender) external view returns (uint) {\\n        return lendingBalance[_lender];\\n    }\\n\\n    ///@notice returns amount of collateralized asset\\n    function getCollateralBalance(address _borrower)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return collateralBalance[_borrower];\\n    }\\n\\n    ///@notice returns borrowing status of borrower\\n    function getBorrowingStatus(address _borrower)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isBorrowing[_borrower];\\n    }\\n\\n    ///@notice returns amount of base asset borrowed\\n    function getBorrowBalance(address _borrower) external view returns (uint) {\\n        return borrowBalance[_borrower];\\n    }\\n\\n    ///@notice returns amount of base asset available to borrow\\n    function getBorrowLimit(address _borrower) external view returns (uint) {\\n        return calculateBorrowLimit(_borrower);\\n    }\\n\\n    ///@notice returns liquidation point\\n    function getLiquidationPoint(address _borrower)\\n        external\\n        view\\n        returns (uint)\\n    {\\n        return calculateLiquidationPoint(_borrower);\\n    }\\n}\\n\",\"keccak256\":\"0x5e08d41f8717264f80d8e4a05e7ceab4f3826ff632dccec23b1caee658d78ca5\",\"license\":\"MIT\"},\"contracts/RewardToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n///@notice Reward Finance's governance token\\n///@author John Nguyen (jooohn.eth)\\ncontract RewardToken is ERC20, Ownable {\\n\\n    constructor() ERC20(\\\"Reward Token\\\", \\\"RWD\\\") {}\\n\\n    ///@notice wrapper for the _mint function, so that only the owner of the contract can mint tokens\\n    ///@param _to address of the user to mint\\n    ///@param _amount amount of $FUSN tokens to mint\\n    function mint(address _to, uint _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n\\n}\",\"keccak256\":\"0x07bcd59ba2528af5db10c69d063985dce3bebcb2b9c71ec81b7880ac7cfcb8e6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620026d6380380620026d68339810160408190526200003491620001ba565b6200003f33620000b9565b6001600160a01b03808316608052811660a052600980546001600160a01b03191673d4a33860578de61dbabdc8bfdb98fd742fa7028e1790556200008560003362000109565b620000b17f5620a1113a72b02a617976b3f6b15600dd7a8b3a916a9ca01e23119d989a05433362000109565b5050620001f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b62000115828262000119565b5050565b60008281526001602090815260408083206001600160a01b038516845290915290205460ff16620001155760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b6001600160a01b0381168114620001b757600080fd5b50565b60008060408385031215620001ce57600080fd5b8251620001db81620001a1565b6020840151909250620001ee81620001a1565b809150509250929050565b60805160a0516124866200025060003960008181610780015261138101526000818161084d01528181610bb501528181611008015281816111ca015281816116ea0152818161186f0152611b3201526124866000f3fe60806040526004361061027c5760003560e01c80637d6af0791161014f578063bac4bfdd116100c1578063dff073661161007a578063dff073661461088f578063e8b214f4146108c8578063eec58766146108e8578063eef9a8d514610908578063f2fde38b14610910578063ff186b2e1461093057600080fd5b8063bac4bfdd146107a2578063bf8a0d7c146107db578063c0e305b8146107fb578063c5ebeaec1461081b578063cdf456e11461083b578063d547741f1461086f57600080fd5b806391d148541161011357806391d14854146106cc578063980d6116146106ec578063a1bf28401461070c578063a217fddf14610739578063a6aa57ce1461074e578063a9265a8b1461076e57600080fd5b80637d6af079146105f95780637f10883b1461062f57806385290fa11461065c5780638833efd61461067e5780638da5cb5b146106ae57600080fd5b8063371fd8e6116101f357806367c9b017116101ac57806367c9b017146105355780636e1dc66e1461054a5780636f904d8414610577578063701d3cd8146105a4578063715018a6146105c45780637c17d237146105d957600080fd5b8063371fd8e61461044d5780633c47504e1461046d578063406cf229146104a35780634d73e9ba146104b857806350711be9146104e55780636112fe2e1461051557600080fd5b80632703ee85116102455780632703ee85146103575780632acf68ed1461038d5780632f2ff15d146103ad5780632f865568146103cd5780632ff6302c146103ed57806336568abe1461042d57600080fd5b80629f92621461028157806301ffc9a7146102a357806306872661146102d857806307e024c214610306578063248a9ca314610326575b600080fd5b34801561028d57600080fd5b506102a161029c366004612125565b610946565b005b3480156102af57600080fd5b506102c36102be36600461213e565b610988565b60405190151581526020015b60405180910390f35b3480156102e457600080fd5b506102f86102f3366004612184565b6109bf565b6040519081526020016102cf565b34801561031257600080fd5b506102f8610321366004612184565b610a32565b34801561033257600080fd5b506102f8610341366004612125565b6000908152600160208190526040909120015490565b34801561036357600080fd5b506102f8610372366004612184565b6001600160a01b031660009081526006602052604090205490565b34801561039957600080fd5b506102a16103a8366004612125565b610a99565b3480156103b957600080fd5b506102a16103c836600461219f565b610cdf565b3480156103d957600080fd5b506102a16103e8366004612184565b610d0a565b3480156103f957600080fd5b5061041573d4a33860578de61dbabdc8bfdb98fd742fa7028e81565b6040516001600160a01b0390911681526020016102cf565b34801561043957600080fd5b506102a161044836600461219f565b610f14565b34801561045957600080fd5b506102a1610468366004612125565b610f92565b34801561047957600080fd5b506102f8610488366004612184565b6001600160a01b031660009081526002602052604090205490565b3480156104af57600080fd5b506102a16112a3565b3480156104c457600080fd5b506102f86104d3366004612184565b60076020526000908152604090205481565b3480156104f157600080fd5b506102c3610500366004612184565b60086020526000908152604090205460ff1681565b34801561052157600080fd5b506102a1610530366004612125565b61140f565b34801561054157600080fd5b506102f86115b2565b34801561055657600080fd5b506102f8610565366004612184565b60046020526000908152604090205481565b34801561058357600080fd5b506102f8610592366004612184565b60036020526000908152604090205481565b3480156105b057600080fd5b506102f86105bf366004612184565b6115cb565b3480156105d057600080fd5b506102a161161e565b3480156105e557600080fd5b506102f86105f4366004612184565b611632565b34801561060557600080fd5b506102f8610614366004612184565b6001600160a01b031660009081526007602052604090205490565b34801561063b57600080fd5b506102f861064a366004612184565b60026020526000908152604090205481565b34801561066857600080fd5b506102f860008051602061243183398151915281565b34801561068a57600080fd5b506102c3610699366004612184565b60056020526000908152604090205460ff1681565b3480156106ba57600080fd5b506000546001600160a01b0316610415565b3480156106d857600080fd5b506102c36106e736600461219f565b61163d565b3480156106f857600080fd5b506102f8610707366004612184565b611668565b34801561071857600080fd5b506102f8610727366004612184565b60066020526000908152604090205481565b34801561074557600080fd5b506102f8600081565b34801561075a57600080fd5b506102a1610769366004612125565b61168b565b34801561077a57600080fd5b506104157f000000000000000000000000000000000000000000000000000000000000000081565b3480156107ae57600080fd5b506102c36107bd366004612184565b6001600160a01b031660009081526005602052604090205460ff1690565b3480156107e757600080fd5b506102a16107f6366004612184565b611941565b34801561080757600080fd5b506102f8610816366004612184565b611983565b34801561082757600080fd5b506102a1610836366004612125565b6119b1565b34801561084757600080fd5b506104157f000000000000000000000000000000000000000000000000000000000000000081565b34801561087b57600080fd5b506102a161088a36600461219f565b611c04565b34801561089b57600080fd5b506102c36108aa366004612184565b6001600160a01b031660009081526008602052604090205460ff1690565b3480156108d457600080fd5b506102a16108e3366004612184565b611c2a565b3480156108f457600080fd5b506102f8610903366004612184565b611c69565b6102a1611c74565b34801561091c57600080fd5b506102a161092b366004612184565b611d29565b34801561093c57600080fd5b506102f8600a5481565b61095e6000805160206124318339815191523361163d565b6109835760405162461bcd60e51b815260040161097a906121cb565b60405180910390fd5b600a55565b60006001600160e01b03198216637965db0b60e01b14806109b957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806109cb83611668565b6109dd90670de0b6b3a7640000612210565b905060006109ef6301e133808361222f565b6001600160a01b038516600090815260026020526040902054909150670de0b6b3a764000090610a20908390612210565b610a2a919061222f565b949350505050565b600080610a3d6115b2565b6001600160a01b03841660009081526007602090815260408083205460069092529091205491925090606490610a739084612210565b610a7d919061222f565b610a88906046612210565b610a929190612251565b9392505050565b3360009081526005602052604090205460ff16610af85760405162461bcd60e51b815260206004820152601e60248201527f43616e2774207769746864726177206265666f7265206c656e64696e67210000604482015260640161097a565b33600090815260026020526040902054811115610b575760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c656e64696e672062616c616e636521000000604482015260640161097a565b6000610b62336109bf565b336000908152600460209081526040808320429055600290915281208054919492935082918590610b94908490612251565b909155505060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c399190612268565b610c555760405162461bcd60e51b815260040161097a9061228a565b3360009081526003602052604081208054849290610c749084906122b7565b909155505033600090815260026020526040902054610ca557336000908152600560205260409020805460ff191690555b60405181815233907f37c871a3744d1af64d9fe61ae5b831e0111ce393b043bed60d48c9b0eb46f66f9060200160405180910390a2505050565b60008281526001602081905260409091200154610cfb81611d9f565b610d058383611da9565b505050565b806000610d156115b2565b9050610d20826115cb565b6001600160a01b038316600090815260066020526040902054610d439083612210565b1115610d915760405162461bcd60e51b815260206004820152601d60248201527f506f736974696f6e2063616e2774206265206c69717569646174656421000000604482015260640161097a565b6001600160a01b03831660009081526008602052604090205460ff16610df95760405162461bcd60e51b815260206004820152601e60248201527f546869732061646472657373206973206e6f7420626f72726f77696e67210000604482015260640161097a565b6001600160a01b038316600090815260066020526040812054610e1f906127109061222f565b610e2a90607d612210565b6001600160a01b0385166000908152600660209081526040808320839055600782528083208390556008909152808220805460ff191690555191925090339083908381818185875af1925050503d8060008114610ea3576040519150601f19603f3d011682016040523d82523d6000602084013e610ea8565b606091505b5050905080610ec95760405162461bcd60e51b815260040161097a906122cf565b60408051338152602081018490526001600160a01b038716917ff37dd205039ad593b44adbb2fcac464abff84760f5919c62baca63a5c49cc739910160405180910390a25050505050565b6001600160a01b0381163314610f845760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161097a565b610f8e8282611e14565b5050565b3360009081526008602052604090205460ff16610ff15760405162461bcd60e51b815260206004820152601d60248201527f43616e2774207265706179206265666f726520626f72726f77696e6721000000604482015260640161097a565b6040516370a0823160e01b815233600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561105257600080fd5b505afa158015611066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108a91906122fc565b10156110ce5760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742066756e64732160681b604482015260640161097a565b6000811180156110ed5750336000908152600760205260409020548111155b6111555760405162461bcd60e51b815260206004820152603360248201527f43616e277420726570617920616d6f756e743a2030206f72206d6f7265207468604482015272616e20616d6f756e7420626f72726f7765642160681b606482015260840161097a565b3360009081526007602052604090205481141561118457336000908152600860205260409020805460ff191690555b33600090815260076020526040812080548392906111a3908490612251565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561121657600080fd5b505af115801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e9190612268565b61126a5760405162461bcd60e51b815260040161097a906122cf565b60405181815233907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231906020015b60405180910390a250565b60006112ae336109bf565b905060008111806112cd57503360009081526003602052604090205415155b6113105760405162461bcd60e51b81526020600482015260146024820152734e6f2c202420746f6b656e73206561726e65642160601b604482015260640161097a565b336000908152600360205260409020541561134757336000908152600360205260408120805491905561134381836122b7565b9150505b3360008181526004602081905260409182902042905590516340c10f1960e01b815290810191909152602481018290526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b1580156113c557600080fd5b505af11580156113d9573d6000803e3d6000fd5b50506040518381523392507fa545e4dc4c88e365d074b08caa078e39f0e143263df2b53bbcc2fb472a31807e9150602001611298565b336000908152600660205260409020548111156114795760405162461bcd60e51b815260206004820152602260248201527f4e6f7420656e6f75676820636f6c6c61746572616c20746f2077697468647261604482015261772160f01b606482015260840161097a565b3360009081526008602052604090205460ff16156114ec5760405162461bcd60e51b815260206004820152602a60248201527f43616e277420776974686472617720636f6c6c61746572616c207768696c6520604482015269626f72726f77696e672160b01b606482015260840161097a565b336000908152600660205260408120805483929061150b908490612251565b9091555050604051600090339083908381818185875af1925050503d8060008114611552576040519150601f19603f3d011682016040523d82523d6000602084013e611557565b606091505b50509050806115785760405162461bcd60e51b815260040161097a906122cf565b60405182815233907fa8e76b822fc682be77f3b1c822ea81f6bda5aed92ba82e6873bfd889f328d1d2906020015b60405180910390a25050565b60006305f5e100600a546115c6919061222f565b905090565b6001600160a01b0381166000908152600760205260408120546115f09060649061222f565b6115fb90600a612210565b6001600160a01b0383166000908152600760205260409020546109b991906122b7565b611626611e7b565b6116306000611ed5565b565b60006109b982610a32565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152600460205260408120546109b99042612251565b600081116116d35760405162461bcd60e51b815260206004820152601560248201527443616e2774206c656e6420616d6f756e743a20302160581b604482015260640161097a565b6040516370a0823160e01b815233600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561173457600080fd5b505afa158015611748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176c91906122fc565b10156117b25760405162461bcd60e51b8152602060048201526015602482015274496e73756666696369656e742062616c616e63652160581b604482015260640161097a565b3360009081526005602052604090205460ff16156118005760006117d5336109bf565b336000908152600360205260408120805492935083929091906117f99084906122b7565b9091555050505b336000908152600260205260408120805483929061181f9084906122b7565b9091555050336000818152600460208181526040808420429055600590915291829020805460ff1916600117905590516323b872dd60e01b815290810191909152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156118bb57600080fd5b505af11580156118cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f39190612268565b61190f5760405162461bcd60e51b815260040161097a9061228a565b60405181815233907f41b123d2493c7b2067b8b7f49cf71532523d83ead11494d793531ece1fd4d04690602001611298565b61194c60003361163d565b6119685760405162461bcd60e51b815260040161097a906121cb565b61198060008051602061243183398151915282610cdf565b50565b600061198e826109bf565b6001600160a01b0383166000908152600360205260409020546109b991906122b7565b336000908152600660205260409020546119ce906103e89061222f565b6119d9906003612210565b33600090815260066020526040812080549091906119f8908490612251565b909155505033600090815260066020526040902054611a525760405162461bcd60e51b81526020600482015260166024820152754e6f2045544820636f6c6c61746572616c697a65642160501b604482015260640161097a565b80611a5c33610a32565b1015611ab65760405162461bcd60e51b815260206004820152602360248201527f426f72726f7720616d6f756e74206578636565647320626f72726f77206c696d60448201526269742160e81b606482015260840161097a565b336000908152600860209081526040808320805460ff19166001179055600790915281208054839290611aea9084906122b7565b9091555060009050611afe6103e88361222f565b611b09906003612210565b611b139083612251565b60405163a9059cbb60e01b8152336004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b158015611b7e57600080fd5b505af1158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb69190612268565b611bd25760405162461bcd60e51b815260040161097a9061228a565b60405182815233907fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750906020016115a6565b60008281526001602081905260409091200154611c2081611d9f565b610d058383611e14565b611c3560003361163d565b611c515760405162461bcd60e51b815260040161097a906121cb565b61198060008051602061243183398151915282611c04565b60006109b9826115cb565b60003411611cce5760405162461bcd60e51b815260206004820152602160248201527f43616e277420636f6c6c617465726c697a652045544820616d6f756e743a20306044820152602160f81b606482015260840161097a565b3360009081526006602052604081208054349290611ced9084906122b7565b909155505060405134815233907f94c9d5464fed48366596c718219e5fbd3c0c61c1a21391bf239075e9de5a727a9060200160405180910390a2565b611d31611e7b565b6001600160a01b038116611d965760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161097a565b61198081611ed5565b6119808133611f25565b611db3828261163d565b610f8e5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611e1e828261163d565b15610f8e5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000546001600160a01b031633146116305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161097a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611f2f828261163d565b610f8e57611f47816001600160a01b03166014611f89565b611f52836020611f89565b604051602001611f63929190612345565b60408051601f198184030181529082905262461bcd60e51b825261097a916004016123ba565b60606000611f98836002612210565b611fa39060026122b7565b67ffffffffffffffff811115611fbb57611fbb6123ed565b6040519080825280601f01601f191660200182016040528015611fe5576020820181803683370190505b509050600360fc1b8160008151811061200057612000612403565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061202f5761202f612403565b60200101906001600160f81b031916908160001a9053506000612053846002612210565b61205e9060016122b7565b90505b60018111156120d6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061209257612092612403565b1a60f81b8282815181106120a8576120a8612403565b60200101906001600160f81b031916908160001a90535060049490941c936120cf81612419565b9050612061565b508315610a925760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161097a565b60006020828403121561213757600080fd5b5035919050565b60006020828403121561215057600080fd5b81356001600160e01b031981168114610a9257600080fd5b80356001600160a01b038116811461217f57600080fd5b919050565b60006020828403121561219657600080fd5b610a9282612168565b600080604083850312156121b257600080fd5b823591506121c260208401612168565b90509250929050565b60208082526015908201527421b0b63632b91034b9903737ba10309039ba30b33360591b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561222a5761222a6121fa565b500290565b60008261224c57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612263576122636121fa565b500390565b60006020828403121561227a57600080fd5b81518015158114610a9257600080fd5b6020808252601390820152725472616e73616374696f6e206661696c65642160681b604082015260600190565b600082198211156122ca576122ca6121fa565b500190565b6020808252601390820152725472616e73616374696f6e204661696c65642160681b604082015260600190565b60006020828403121561230e57600080fd5b5051919050565b60005b83811015612330578181015183820152602001612318565b8381111561233f576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161237d816017850160208801612315565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123ae816028840160208801612315565b01602801949350505050565b60208152600082518060208401526123d9816040850160208701612315565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081612428576124286121fa565b50600019019056fe5620a1113a72b02a617976b3f6b15600dd7a8b3a916a9ca01e23119d989a0543a264697066735822122080e72d3c1804f91ab952301905b7d74829d561c7291d778a9bc65bc2f7ab111764736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061027c5760003560e01c80637d6af0791161014f578063bac4bfdd116100c1578063dff073661161007a578063dff073661461088f578063e8b214f4146108c8578063eec58766146108e8578063eef9a8d514610908578063f2fde38b14610910578063ff186b2e1461093057600080fd5b8063bac4bfdd146107a2578063bf8a0d7c146107db578063c0e305b8146107fb578063c5ebeaec1461081b578063cdf456e11461083b578063d547741f1461086f57600080fd5b806391d148541161011357806391d14854146106cc578063980d6116146106ec578063a1bf28401461070c578063a217fddf14610739578063a6aa57ce1461074e578063a9265a8b1461076e57600080fd5b80637d6af079146105f95780637f10883b1461062f57806385290fa11461065c5780638833efd61461067e5780638da5cb5b146106ae57600080fd5b8063371fd8e6116101f357806367c9b017116101ac57806367c9b017146105355780636e1dc66e1461054a5780636f904d8414610577578063701d3cd8146105a4578063715018a6146105c45780637c17d237146105d957600080fd5b8063371fd8e61461044d5780633c47504e1461046d578063406cf229146104a35780634d73e9ba146104b857806350711be9146104e55780636112fe2e1461051557600080fd5b80632703ee85116102455780632703ee85146103575780632acf68ed1461038d5780632f2ff15d146103ad5780632f865568146103cd5780632ff6302c146103ed57806336568abe1461042d57600080fd5b80629f92621461028157806301ffc9a7146102a357806306872661146102d857806307e024c214610306578063248a9ca314610326575b600080fd5b34801561028d57600080fd5b506102a161029c366004612125565b610946565b005b3480156102af57600080fd5b506102c36102be36600461213e565b610988565b60405190151581526020015b60405180910390f35b3480156102e457600080fd5b506102f86102f3366004612184565b6109bf565b6040519081526020016102cf565b34801561031257600080fd5b506102f8610321366004612184565b610a32565b34801561033257600080fd5b506102f8610341366004612125565b6000908152600160208190526040909120015490565b34801561036357600080fd5b506102f8610372366004612184565b6001600160a01b031660009081526006602052604090205490565b34801561039957600080fd5b506102a16103a8366004612125565b610a99565b3480156103b957600080fd5b506102a16103c836600461219f565b610cdf565b3480156103d957600080fd5b506102a16103e8366004612184565b610d0a565b3480156103f957600080fd5b5061041573d4a33860578de61dbabdc8bfdb98fd742fa7028e81565b6040516001600160a01b0390911681526020016102cf565b34801561043957600080fd5b506102a161044836600461219f565b610f14565b34801561045957600080fd5b506102a1610468366004612125565b610f92565b34801561047957600080fd5b506102f8610488366004612184565b6001600160a01b031660009081526002602052604090205490565b3480156104af57600080fd5b506102a16112a3565b3480156104c457600080fd5b506102f86104d3366004612184565b60076020526000908152604090205481565b3480156104f157600080fd5b506102c3610500366004612184565b60086020526000908152604090205460ff1681565b34801561052157600080fd5b506102a1610530366004612125565b61140f565b34801561054157600080fd5b506102f86115b2565b34801561055657600080fd5b506102f8610565366004612184565b60046020526000908152604090205481565b34801561058357600080fd5b506102f8610592366004612184565b60036020526000908152604090205481565b3480156105b057600080fd5b506102f86105bf366004612184565b6115cb565b3480156105d057600080fd5b506102a161161e565b3480156105e557600080fd5b506102f86105f4366004612184565b611632565b34801561060557600080fd5b506102f8610614366004612184565b6001600160a01b031660009081526007602052604090205490565b34801561063b57600080fd5b506102f861064a366004612184565b60026020526000908152604090205481565b34801561066857600080fd5b506102f860008051602061243183398151915281565b34801561068a57600080fd5b506102c3610699366004612184565b60056020526000908152604090205460ff1681565b3480156106ba57600080fd5b506000546001600160a01b0316610415565b3480156106d857600080fd5b506102c36106e736600461219f565b61163d565b3480156106f857600080fd5b506102f8610707366004612184565b611668565b34801561071857600080fd5b506102f8610727366004612184565b60066020526000908152604090205481565b34801561074557600080fd5b506102f8600081565b34801561075a57600080fd5b506102a1610769366004612125565b61168b565b34801561077a57600080fd5b506104157f000000000000000000000000000000000000000000000000000000000000000081565b3480156107ae57600080fd5b506102c36107bd366004612184565b6001600160a01b031660009081526005602052604090205460ff1690565b3480156107e757600080fd5b506102a16107f6366004612184565b611941565b34801561080757600080fd5b506102f8610816366004612184565b611983565b34801561082757600080fd5b506102a1610836366004612125565b6119b1565b34801561084757600080fd5b506104157f000000000000000000000000000000000000000000000000000000000000000081565b34801561087b57600080fd5b506102a161088a36600461219f565b611c04565b34801561089b57600080fd5b506102c36108aa366004612184565b6001600160a01b031660009081526008602052604090205460ff1690565b3480156108d457600080fd5b506102a16108e3366004612184565b611c2a565b3480156108f457600080fd5b506102f8610903366004612184565b611c69565b6102a1611c74565b34801561091c57600080fd5b506102a161092b366004612184565b611d29565b34801561093c57600080fd5b506102f8600a5481565b61095e6000805160206124318339815191523361163d565b6109835760405162461bcd60e51b815260040161097a906121cb565b60405180910390fd5b600a55565b60006001600160e01b03198216637965db0b60e01b14806109b957506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000806109cb83611668565b6109dd90670de0b6b3a7640000612210565b905060006109ef6301e133808361222f565b6001600160a01b038516600090815260026020526040902054909150670de0b6b3a764000090610a20908390612210565b610a2a919061222f565b949350505050565b600080610a3d6115b2565b6001600160a01b03841660009081526007602090815260408083205460069092529091205491925090606490610a739084612210565b610a7d919061222f565b610a88906046612210565b610a929190612251565b9392505050565b3360009081526005602052604090205460ff16610af85760405162461bcd60e51b815260206004820152601e60248201527f43616e2774207769746864726177206265666f7265206c656e64696e67210000604482015260640161097a565b33600090815260026020526040902054811115610b575760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c656e64696e672062616c616e636521000000604482015260640161097a565b6000610b62336109bf565b336000908152600460209081526040808320429055600290915281208054919492935082918590610b94908490612251565b909155505060405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c399190612268565b610c555760405162461bcd60e51b815260040161097a9061228a565b3360009081526003602052604081208054849290610c749084906122b7565b909155505033600090815260026020526040902054610ca557336000908152600560205260409020805460ff191690555b60405181815233907f37c871a3744d1af64d9fe61ae5b831e0111ce393b043bed60d48c9b0eb46f66f9060200160405180910390a2505050565b60008281526001602081905260409091200154610cfb81611d9f565b610d058383611da9565b505050565b806000610d156115b2565b9050610d20826115cb565b6001600160a01b038316600090815260066020526040902054610d439083612210565b1115610d915760405162461bcd60e51b815260206004820152601d60248201527f506f736974696f6e2063616e2774206265206c69717569646174656421000000604482015260640161097a565b6001600160a01b03831660009081526008602052604090205460ff16610df95760405162461bcd60e51b815260206004820152601e60248201527f546869732061646472657373206973206e6f7420626f72726f77696e67210000604482015260640161097a565b6001600160a01b038316600090815260066020526040812054610e1f906127109061222f565b610e2a90607d612210565b6001600160a01b0385166000908152600660209081526040808320839055600782528083208390556008909152808220805460ff191690555191925090339083908381818185875af1925050503d8060008114610ea3576040519150601f19603f3d011682016040523d82523d6000602084013e610ea8565b606091505b5050905080610ec95760405162461bcd60e51b815260040161097a906122cf565b60408051338152602081018490526001600160a01b038716917ff37dd205039ad593b44adbb2fcac464abff84760f5919c62baca63a5c49cc739910160405180910390a25050505050565b6001600160a01b0381163314610f845760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161097a565b610f8e8282611e14565b5050565b3360009081526008602052604090205460ff16610ff15760405162461bcd60e51b815260206004820152601d60248201527f43616e2774207265706179206265666f726520626f72726f77696e6721000000604482015260640161097a565b6040516370a0823160e01b815233600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561105257600080fd5b505afa158015611066573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108a91906122fc565b10156110ce5760405162461bcd60e51b8152602060048201526013602482015272496e73756666696369656e742066756e64732160681b604482015260640161097a565b6000811180156110ed5750336000908152600760205260409020548111155b6111555760405162461bcd60e51b815260206004820152603360248201527f43616e277420726570617920616d6f756e743a2030206f72206d6f7265207468604482015272616e20616d6f756e7420626f72726f7765642160681b606482015260840161097a565b3360009081526007602052604090205481141561118457336000908152600860205260409020805460ff191690555b33600090815260076020526040812080548392906111a3908490612251565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b15801561121657600080fd5b505af115801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e9190612268565b61126a5760405162461bcd60e51b815260040161097a906122cf565b60405181815233907f5c16de4f8b59bd9caf0f49a545f25819a895ed223294290b408242e72a594231906020015b60405180910390a250565b60006112ae336109bf565b905060008111806112cd57503360009081526003602052604090205415155b6113105760405162461bcd60e51b81526020600482015260146024820152734e6f2c202420746f6b656e73206561726e65642160601b604482015260640161097a565b336000908152600360205260409020541561134757336000908152600360205260408120805491905561134381836122b7565b9150505b3360008181526004602081905260409182902042905590516340c10f1960e01b815290810191909152602481018290526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b1580156113c557600080fd5b505af11580156113d9573d6000803e3d6000fd5b50506040518381523392507fa545e4dc4c88e365d074b08caa078e39f0e143263df2b53bbcc2fb472a31807e9150602001611298565b336000908152600660205260409020548111156114795760405162461bcd60e51b815260206004820152602260248201527f4e6f7420656e6f75676820636f6c6c61746572616c20746f2077697468647261604482015261772160f01b606482015260840161097a565b3360009081526008602052604090205460ff16156114ec5760405162461bcd60e51b815260206004820152602a60248201527f43616e277420776974686472617720636f6c6c61746572616c207768696c6520604482015269626f72726f77696e672160b01b606482015260840161097a565b336000908152600660205260408120805483929061150b908490612251565b9091555050604051600090339083908381818185875af1925050503d8060008114611552576040519150601f19603f3d011682016040523d82523d6000602084013e611557565b606091505b50509050806115785760405162461bcd60e51b815260040161097a906122cf565b60405182815233907fa8e76b822fc682be77f3b1c822ea81f6bda5aed92ba82e6873bfd889f328d1d2906020015b60405180910390a25050565b60006305f5e100600a546115c6919061222f565b905090565b6001600160a01b0381166000908152600760205260408120546115f09060649061222f565b6115fb90600a612210565b6001600160a01b0383166000908152600760205260409020546109b991906122b7565b611626611e7b565b6116306000611ed5565b565b60006109b982610a32565b60009182526001602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6001600160a01b0381166000908152600460205260408120546109b99042612251565b600081116116d35760405162461bcd60e51b815260206004820152601560248201527443616e2774206c656e6420616d6f756e743a20302160581b604482015260640161097a565b6040516370a0823160e01b815233600482015281907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561173457600080fd5b505afa158015611748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176c91906122fc565b10156117b25760405162461bcd60e51b8152602060048201526015602482015274496e73756666696369656e742062616c616e63652160581b604482015260640161097a565b3360009081526005602052604090205460ff16156118005760006117d5336109bf565b336000908152600360205260408120805492935083929091906117f99084906122b7565b9091555050505b336000908152600260205260408120805483929061181f9084906122b7565b9091555050336000818152600460208181526040808420429055600590915291829020805460ff1916600117905590516323b872dd60e01b815290810191909152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156118bb57600080fd5b505af11580156118cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f39190612268565b61190f5760405162461bcd60e51b815260040161097a9061228a565b60405181815233907f41b123d2493c7b2067b8b7f49cf71532523d83ead11494d793531ece1fd4d04690602001611298565b61194c60003361163d565b6119685760405162461bcd60e51b815260040161097a906121cb565b61198060008051602061243183398151915282610cdf565b50565b600061198e826109bf565b6001600160a01b0383166000908152600360205260409020546109b991906122b7565b336000908152600660205260409020546119ce906103e89061222f565b6119d9906003612210565b33600090815260066020526040812080549091906119f8908490612251565b909155505033600090815260066020526040902054611a525760405162461bcd60e51b81526020600482015260166024820152754e6f2045544820636f6c6c61746572616c697a65642160501b604482015260640161097a565b80611a5c33610a32565b1015611ab65760405162461bcd60e51b815260206004820152602360248201527f426f72726f7720616d6f756e74206578636565647320626f72726f77206c696d60448201526269742160e81b606482015260840161097a565b336000908152600860209081526040808320805460ff19166001179055600790915281208054839290611aea9084906122b7565b9091555060009050611afe6103e88361222f565b611b09906003612210565b611b139083612251565b60405163a9059cbb60e01b8152336004820152602481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb90604401602060405180830381600087803b158015611b7e57600080fd5b505af1158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb69190612268565b611bd25760405162461bcd60e51b815260040161097a9061228a565b60405182815233907fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a36750906020016115a6565b60008281526001602081905260409091200154611c2081611d9f565b610d058383611e14565b611c3560003361163d565b611c515760405162461bcd60e51b815260040161097a906121cb565b61198060008051602061243183398151915282611c04565b60006109b9826115cb565b60003411611cce5760405162461bcd60e51b815260206004820152602160248201527f43616e277420636f6c6c617465726c697a652045544820616d6f756e743a20306044820152602160f81b606482015260840161097a565b3360009081526006602052604081208054349290611ced9084906122b7565b909155505060405134815233907f94c9d5464fed48366596c718219e5fbd3c0c61c1a21391bf239075e9de5a727a9060200160405180910390a2565b611d31611e7b565b6001600160a01b038116611d965760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161097a565b61198081611ed5565b6119808133611f25565b611db3828261163d565b610f8e5760008281526001602081815260408084206001600160a01b0386168086529252808420805460ff19169093179092559051339285917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d9190a45050565b611e1e828261163d565b15610f8e5760008281526001602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000546001600160a01b031633146116305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161097a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611f2f828261163d565b610f8e57611f47816001600160a01b03166014611f89565b611f52836020611f89565b604051602001611f63929190612345565b60408051601f198184030181529082905262461bcd60e51b825261097a916004016123ba565b60606000611f98836002612210565b611fa39060026122b7565b67ffffffffffffffff811115611fbb57611fbb6123ed565b6040519080825280601f01601f191660200182016040528015611fe5576020820181803683370190505b509050600360fc1b8160008151811061200057612000612403565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061202f5761202f612403565b60200101906001600160f81b031916908160001a9053506000612053846002612210565b61205e9060016122b7565b90505b60018111156120d6576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061209257612092612403565b1a60f81b8282815181106120a8576120a8612403565b60200101906001600160f81b031916908160001a90535060049490941c936120cf81612419565b9050612061565b508315610a925760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161097a565b60006020828403121561213757600080fd5b5035919050565b60006020828403121561215057600080fd5b81356001600160e01b031981168114610a9257600080fd5b80356001600160a01b038116811461217f57600080fd5b919050565b60006020828403121561219657600080fd5b610a9282612168565b600080604083850312156121b257600080fd5b823591506121c260208401612168565b90509250929050565b60208082526015908201527421b0b63632b91034b9903737ba10309039ba30b33360591b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561222a5761222a6121fa565b500290565b60008261224c57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015612263576122636121fa565b500390565b60006020828403121561227a57600080fd5b81518015158114610a9257600080fd5b6020808252601390820152725472616e73616374696f6e206661696c65642160681b604082015260600190565b600082198211156122ca576122ca6121fa565b500190565b6020808252601390820152725472616e73616374696f6e204661696c65642160681b604082015260600190565b60006020828403121561230e57600080fd5b5051919050565b60005b83811015612330578181015183820152602001612318565b8381111561233f576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161237d816017850160208801612315565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516123ae816028840160208801612315565b01602801949350505050565b60208152600082518060208401526123d9816040850160208701612315565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081612428576124286121fa565b50600019019056fe5620a1113a72b02a617976b3f6b15600dd7a8b3a916a9ca01e23119d989a0543a264697066735822122080e72d3c1804f91ab952301905b7d74829d561c7291d778a9bc65bc2f7ab111764736f6c63430008090033",
  "devdoc": {
    "author": "John Nguyen (jooohn.eth)",
    "kind": "dev",
    "methods": {
      "borrow(uint256)": {
        "details": "deducting 0.3% from msg.sender's ETH collateral as protocol's fees",
        "params": {
          "_amount": "amount of base asset to borrow"
        }
      },
      "calculateBorrowLimit(address)": {
        "returns": {
          "limit": "current borrow limit for user"
        }
      },
      "calculateYieldTime(address)": {
        "params": {
          "_lender": "address of lender"
        },
        "returns": {
          "lendingTime": "amount of time staked by lender"
        }
      },
      "calculateYieldTotal(address)": {
        "details": "rate = timeStaked / amount of time needed to earn 100% of $FUSN tokens. 31536000 = number of seconds in a year.",
        "params": {
          "_lender": "address of lender"
        },
        "returns": {
          "yield": "amount of $FUSN tokens earned by lender"
        }
      },
      "constructor": {
        "params": {
          "_JdaiAddress": "address of $FUSN token",
          "_baseAssetAddress": "address of base asset token"
        }
      },
      "getEthPrice()": {
        "returns": {
          "_ethPrice": "price of ETH in USD"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "lend(uint256)": {
        "params": {
          "_amount": "amount of tokens to lend"
        }
      },
      "liquidate(address)": {
        "details": "passedLiquidation modifier checks if the borrow position has passed liquidation pointliquidationReward 1.25% of borrower's ETH collateral",
        "params": {
          "_borrower": "address of borrower"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "repay(uint256)": {
        "params": {
          "_amount": "amount of base asset to repay"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawCollateral(uint256)": {
        "params": {
          "_amount": "amount of ETH the user wants to withdraw"
        }
      },
      "withdrawLend(uint256)": {
        "params": {
          "_amount": "amount of tokens to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Lend(address,uint256)": {
        "notice": "events emitted after each action."
      }
    },
    "kind": "user",
    "methods": {
      "baseAsset()": {
        "notice": "declaring token variables."
      },
      "borrow(uint256)": {
        "notice": "borrows base asset"
      },
      "calculateBorrowLimit(address)": {
        "notice": "calculates the borrow limit depending on the price of ETH and borrow limit rate."
      },
      "calculateYieldTime(address)": {
        "notice": "calculates amount of time the lender has been lending since the last update."
      },
      "calculateYieldTotal(address)": {
        "notice": "calculates amount of $FUSN tokens the lender has earned since the last update."
      },
      "claimYield()": {
        "notice": "claims all yield earned by lender."
      },
      "collateralBalance(address)": {
        "notice": "mappings needed to keep track of collateral and borrowing"
      },
      "collateralize()": {
        "notice": "collateralizes user's ETH and sets borrow limit"
      },
      "constructor": {
        "notice": "initiating tokens"
      },
      "getBorrowBalance(address)": {
        "notice": "returns amount of base asset borrowed"
      },
      "getBorrowLimit(address)": {
        "notice": "returns amount of base asset available to borrow"
      },
      "getBorrowingStatus(address)": {
        "notice": "returns borrowing status of borrower"
      },
      "getCollateralBalance(address)": {
        "notice": "returns amount of collateralized asset"
      },
      "getEarnedJdaiTokens(address)": {
        "notice": "retuns amount of $FUSN tokens earned"
      },
      "getEthPrice()": {
        "notice": "Function to get latest price of ETH in USD"
      },
      "getLendingBalance(address)": {
        "notice": "returns amount of base asset lent"
      },
      "getLendingStatus(address)": {
        "notice": "returns lending status of lender"
      },
      "getLiquidationPoint(address)": {
        "notice": "returns liquidation point"
      },
      "lend(uint256)": {
        "notice": "lends base asset."
      },
      "lendingBalance(address)": {
        "notice": "mappings needed to keep track of lending"
      },
      "liquidate(address)": {
        "notice": "liquidates a borrow position"
      },
      "repay(uint256)": {
        "notice": "repays base asset debt"
      },
      "withdrawCollateral(uint256)": {
        "notice": "withdraw user's collateral ETH and recalculates the borrow limit"
      },
      "withdrawLend(uint256)": {
        "notice": "withdraw base asset."
      }
    },
    "notice": "Main Jdai Finance contract responsible for lending, collateralizing and borrowing",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 446,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 70,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "_roles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 1592,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "lendingBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1596,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "JdaiBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1600,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "startTime",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1604,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "isLending",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1609,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "collateralBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1613,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "borrowBalance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1617,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "isBorrowing",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1621,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "priceFeed",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 1638,
        "contract": "contracts/JdaiCore.sol:JdaiCore",
        "label": "ethPrice",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/JdaiCore.sol:JdaiCore",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/JdaiCore.sol:JdaiCore",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}