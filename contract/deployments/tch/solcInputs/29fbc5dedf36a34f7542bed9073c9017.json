{
  "language": "Solidity",
  "sources": {
    "contracts/JdaiCore.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./RewardToken.sol\";\n\n///@notice Main Jdai Finance contract responsible for lending, collateralizing and borrowing\n///@author John Nguyen (jooohn.eth)\ncontract JdaiCore is Ownable, AccessControl {\n    ///@notice events emitted after each action.\n    event Lend(address indexed lender, uint amount);\n    event WithdrawLend(address indexed lender, uint amount);\n    event ClaimYield(address indexed lender, uint amount);\n    event Collateralize(address indexed borrower, uint amount);\n    event WithdrawCollateral(address indexed borrower, uint amount);\n    event Borrow(address indexed borrower, uint amount);\n    event Repay(address indexed borrower, uint amount);\n    event Liquidate(address liquidator, uint reward, address indexed borrower);\n\n    ///@notice mappings needed to keep track of lending\n    mapping(address => uint) public lendingBalance;\n    mapping(address => uint) public JdaiBalance;\n    mapping(address => uint) public startTime;\n    mapping(address => bool) public isLending;\n\n    ///@notice mappings needed to keep track of collateral and borrowing\n    mapping(address => uint) public collateralBalance;\n    mapping(address => uint) public borrowBalance;\n    mapping(address => bool) public isBorrowing;\n\n    ///@notice declaring chainlink's price aggregator.\n    AggregatorV3Interface internal priceFeed;\n    address public constant baseAssetAddress =\n        0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e;\n\n    ///@notice declaring token variables.\n    IERC20 public immutable baseAsset;\n    RewardToken public immutable JdaiToken;\n\n    bytes32 public constant STAFF_ROLE = keccak256(\"STAFF_ROLE\");\n    uint public ethPrice;\n    uint public Fee = 3;\n\n    ///@notice initiating tokens\n    ///@param _baseAssetAddress address of base asset token\n    ///@param _JdaiAddress address of $FUSN token\n    constructor(IERC20 _baseAssetAddress, RewardToken _JdaiAddress) {\n        baseAsset = _baseAssetAddress;\n        JdaiToken = _JdaiAddress;\n        priceFeed = AggregatorV3Interface(baseAssetAddress);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(STAFF_ROLE, msg.sender);\n    }\n\n    modifier onlyStaff() {\n        require(hasRole(STAFF_ROLE, msg.sender), \"Caller is not a staff\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"Caller is not a staff\"\n        );\n        _;\n    }\n\n    function grantStaff(address staff) external onlyAdmin {\n        grantRole(STAFF_ROLE, staff);\n    }\n\n    function revokeStaff(address staff) external onlyAdmin {\n        revokeRole(STAFF_ROLE, staff);\n    }\n\n    function setEthPrice(uint _ethPrice) external onlyStaff {\n        ethPrice = _ethPrice;\n    }\n    function setFee(uint _fee) external onlyStaff {\n        require(_fee < 1000,\"Can't set Fee > 1000!\");\n        Fee = _fee;\n    }\n    ///@notice checks if the borrow position has passed the liquidation point\n    ///@dev added 'virtual' identifier for MockCore to override\n    modifier passedLiquidation(address _borrower) virtual {\n        uint _ethPrice = getEthPrice();\n        require(\n            (_ethPrice * collateralBalance[_borrower]) <=\n                calculateLiquidationPoint(_borrower),\n            \"Position can't be liquidated!\"\n        );\n        _;\n    }\n\n    ///@notice Function to get latest price of ETH in USD\n    ///@return _ethPrice price of ETH in USD\n    function getEthPrice() public view returns (uint _ethPrice) {\n        _ethPrice = uint(ethPrice) / 10**8;\n    }\n\n    ///@notice calculates amount of time the lender has been lending since the last update.\n    ///@param _lender address of lender\n    ///@return lendingTime amount of time staked by lender\n    function calculateYieldTime(address _lender)\n        public\n        view\n        returns (uint lendingTime)\n    {\n        lendingTime = block.timestamp - startTime[_lender];\n    }\n\n    ///@notice calculates amount of $FUSN tokens the lender has earned since the last update.\n    ///@dev rate = timeStaked / amount of time needed to earn 100% of $FUSN tokens. 31536000 = number of seconds in a year.\n    ///@param _lender address of lender\n    ///@return yield amount of $FUSN tokens earned by lender\n    function calculateYieldTotal(address _lender)\n        public\n        view\n        returns (uint yield)\n    {\n        uint timeStaked = calculateYieldTime(_lender) * 10**18;\n        uint rate = timeStaked / 31536000;\n        yield = (lendingBalance[_lender] * rate) / 10**18;\n    }\n\n    ///@notice calculates the borrow limit depending on the price of ETH and borrow limit rate.\n    ///@return limit current borrow limit for user\n    function calculateBorrowLimit(address _borrower)\n        public\n        view\n        returns (uint limit)\n    {\n        uint _ethPrice = getEthPrice();\n        limit =\n            ((((_ethPrice * collateralBalance[_borrower]) / 100) * 70)) -\n            borrowBalance[_borrower];\n    }\n\n    function calculateLiquidationPoint(address _borrower)\n        public\n        view\n        returns (uint point)\n    {\n        point =\n            borrowBalance[_borrower] +\n            ((borrowBalance[_borrower] / 100) * 10);\n    }\n\n    ///@notice lends base asset.\n    ///@param _amount amount of tokens to lend\n    function lend(uint _amount) public {\n        require(_amount > 0, \"Can't lend amount: 0!\");\n        require(\n            baseAsset.balanceOf(msg.sender) >= _amount,\n            \"Insufficient balance!\"\n        );\n\n        if (isLending[msg.sender]) {\n            uint yield = calculateYieldTotal(msg.sender);\n            JdaiBalance[msg.sender] += yield;\n        }\n\n        lendingBalance[msg.sender] += _amount;\n        startTime[msg.sender] = block.timestamp;\n        isLending[msg.sender] = true;\n\n        require(\n            baseAsset.transferFrom(msg.sender, address(this), _amount),\n            \"Transaction failed!\"\n        );\n\n        emit Lend(msg.sender, _amount);\n    }\n\n    ///@notice withdraw base asset.\n    ///@param _amount amount of tokens to withdraw\n    function withdrawLend(uint _amount) public {\n        require(isLending[msg.sender], \"Can't withdraw before lending!\");\n        require(\n            lendingBalance[msg.sender] >= _amount,\n            \"Insufficient lending balance!\"\n        );\n\n        uint yield = calculateYieldTotal(msg.sender);\n        startTime[msg.sender] = block.timestamp;\n        uint withdrawAmount = _amount;\n        _amount = 0;\n        lendingBalance[msg.sender] -= withdrawAmount;\n\n        require(\n            baseAsset.transfer(msg.sender, withdrawAmount),\n            \"Transaction failed!\"\n        );\n        JdaiBalance[msg.sender] += yield;\n\n        if (lendingBalance[msg.sender] == 0) {\n            isLending[msg.sender] = false;\n        }\n\n        emit WithdrawLend(msg.sender, withdrawAmount);\n    }\n\n    ///@notice claims all yield earned by lender.\n    function claimYield() public {\n        uint yield = calculateYieldTotal(msg.sender);\n\n        require(\n            yield > 0 || JdaiBalance[msg.sender] > 0,\n            \"No, $ tokens earned!\"\n        );\n\n        if (JdaiBalance[msg.sender] != 0) {\n            uint oldYield = JdaiBalance[msg.sender];\n            JdaiBalance[msg.sender] = 0;\n            yield += oldYield;\n        }\n\n        startTime[msg.sender] = block.timestamp;\n        JdaiToken.mint(msg.sender, yield);\n\n        emit ClaimYield(msg.sender, yield);\n    }\n\n    ///@notice collateralizes user's ETH and sets borrow limit\n    function collateralize() public payable {\n        require(msg.value > 0, \"Can't collaterlize ETH amount: 0!\");\n\n        collateralBalance[msg.sender] += msg.value;\n\n        emit Collateralize(msg.sender, msg.value);\n    }\n\n    ///@notice withdraw user's collateral ETH and recalculates the borrow limit\n    ///@param _amount amount of ETH the user wants to withdraw\n    function withdrawCollateral(uint _amount) public {\n        require(\n            collateralBalance[msg.sender] >= _amount,\n            \"Not enough collateral to withdraw!\"\n        );\n        require(\n            !isBorrowing[msg.sender],\n            \"Can't withdraw collateral while borrowing!\"\n        );\n\n        collateralBalance[msg.sender] -= _amount;\n\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\n        require(success, \"Transaction Failed!\");\n\n        emit WithdrawCollateral(msg.sender, _amount);\n    }\n\n    ///@notice borrows base asset\n    ///@param _amount amount of base asset to borrow\n    ///@dev deducting 0.3% from msg.sender's ETH collateral as protocol's fees\n    function borrow(uint _amount) public {\n        collateralBalance[msg.sender] -=\n            (collateralBalance[msg.sender] / 1000) *\n            3;\n\n        require(collateralBalance[msg.sender] > 0, \"No ETH collateralized!\");\n        require(\n            calculateBorrowLimit(msg.sender) >= _amount,\n            \"Borrow amount exceeds borrow limit!\"\n        );\n\n        isBorrowing[msg.sender] = true;\n        borrowBalance[msg.sender] += _amount;\n        uint _amountTransfer = _amount - ((_amount / 1000) * Fee);\n        require(baseAsset.transfer(msg.sender, _amountTransfer), \"Transaction failed!\");\n\n        emit Borrow(msg.sender, _amount);\n    }\n\n    ///@notice repays base asset debt\n    ///@param _amount amount of base asset to repay\n    function repay(uint _amount) public {\n        require(isBorrowing[msg.sender], \"Can't repay before borrowing!\");\n        require(\n            baseAsset.balanceOf(msg.sender) >= _amount,\n            \"Insufficient funds!\"\n        );\n        require(\n            _amount > 0 && _amount <= borrowBalance[msg.sender],\n            \"Can't repay amount: 0 or more than amount borrowed!\"\n        );\n\n        if (_amount == borrowBalance[msg.sender]) {\n            isBorrowing[msg.sender] = false;\n        }\n\n        borrowBalance[msg.sender] -= _amount;\n\n        require(\n            baseAsset.transferFrom(msg.sender, address(this), _amount),\n            \"Transaction Failed!\"\n        );\n\n        emit Repay(msg.sender, _amount);\n    }\n\n    ///@notice liquidates a borrow position\n    ///@param _borrower address of borrower\n    ///@dev passedLiquidation modifier checks if the borrow position has passed liquidation point\n    ///@dev liquidationReward 1.25% of borrower's ETH collateral\n    function liquidate(address _borrower) public passedLiquidation(_borrower) {\n        require(isBorrowing[_borrower], \"This address is not borrowing!\");\n\n        uint liquidationReward = (collateralBalance[_borrower] / 10000) * 125;\n\n        collateralBalance[_borrower] = 0;\n        borrowBalance[_borrower] = 0;\n        isBorrowing[_borrower] = false;\n\n        (bool success, ) = msg.sender.call{value: liquidationReward}(\"\");\n        require(success, \"Transaction Failed!\");\n\n        emit Liquidate(msg.sender, liquidationReward, _borrower);\n    }\n\n    ///@notice returns lending status of lender\n    function getLendingStatus(address _lender) external view returns (bool) {\n        return isLending[_lender];\n    }\n\n    ///@notice retuns amount of $FUSN tokens earned\n    function getEarnedJdaiTokens(address _lender) external view returns (uint) {\n        return JdaiBalance[_lender] + calculateYieldTotal(_lender);\n    }\n\n    ///@notice returns amount of base asset lent\n    function getLendingBalance(address _lender) external view returns (uint) {\n        return lendingBalance[_lender];\n    }\n\n    ///@notice returns amount of collateralized asset\n    function getCollateralBalance(address _borrower)\n        external\n        view\n        returns (uint)\n    {\n        return collateralBalance[_borrower];\n    }\n\n    ///@notice returns borrowing status of borrower\n    function getBorrowingStatus(address _borrower)\n        external\n        view\n        returns (bool)\n    {\n        return isBorrowing[_borrower];\n    }\n\n    ///@notice returns amount of base asset borrowed\n    function getBorrowBalance(address _borrower) external view returns (uint) {\n        return borrowBalance[_borrower];\n    }\n\n    ///@notice returns amount of base asset available to borrow\n    function getBorrowLimit(address _borrower) external view returns (uint) {\n        return calculateBorrowLimit(_borrower);\n    }\n\n    ///@notice returns liquidation point\n    function getLiquidationPoint(address _borrower)\n        external\n        view\n        returns (uint)\n    {\n        return calculateLiquidationPoint(_borrower);\n    }\n}\n"
    },
    "contracts/RewardToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n///@notice Reward Finance's governance token\n///@author John Nguyen (jooohn.eth)\ncontract RewardToken is ERC20, Ownable {\n\n    constructor() ERC20(\"Reward Token\", \"RWD\") {}\n\n    ///@notice wrapper for the _mint function, so that only the owner of the contract can mint tokens\n    ///@param _to address of the user to mint\n    ///@param _amount amount of $FUSN tokens to mint\n    function mint(address _to, uint _amount) public onlyOwner {\n        _mint(_to, _amount);\n    }\n\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/Mocks/MockCore.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"../JdaiCore.sol\";\n\n///@notice Mock of JdaiCore contract for testing liquidate function\ncontract MockCore is JdaiCore {\n\n    constructor(IERC20 _baseAssetAddress, RewardToken _fusionAddress) JdaiCore(_baseAssetAddress, _fusionAddress){}\n\n    ///@notice overriding the passedLiquidation modifier to mock the price of ETH. Let's anyone liquidate any borrow position.\n    ///@dev ethPrice set to 1 to be able to get liquidated\n    modifier passedLiquidation(address _borrower) override {\n        uint ethPrice = 1;\n        require((ethPrice * collateralBalance[_borrower]) <= calculateLiquidationPoint(_borrower), \"Position can't be liquidated!\");\n        _;\n    }\n\n}"
    },
    "contracts/JdaiStaking.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./RewardToken.sol\";\n\n///@notice Main Jdai Finance contract responsible for lending, collateralizing and borrowing\n///@author John Nguyen (jooohn.eth)\n///@author Dome C. (jfin.eth)\ncontract JdaiStaking is Ownable, AccessControl {\n    ///@notice events emitted after each action.\n    event Lend(address indexed lender, uint amount);\n    event WithdrawLend(address indexed lender, uint amount);\n    event ClaimYield(address indexed lender, uint amount);\n    event Collateralize(address indexed borrower, uint amount);\n    event WithdrawCollateral(address indexed borrower, uint amount);\n    event Borrow(address indexed borrower, uint amount);\n    event Repay(address indexed borrower, uint amount);\n    event Liquidate(address liquidator, uint reward, address indexed borrower);\n\n    ///@notice mappings needed to keep track of lending\n    mapping(address => uint) public lendingBalance;\n    mapping(address => uint) public JdaiBalance;\n    mapping(address => uint) public startTime;\n    mapping(address => bool) public isLending;\n\n    ///@notice mappings needed to keep track of collateral and borrowing\n    mapping(address => uint) public collateralBalance;\n    mapping(address => uint) public borrowBalance;\n    mapping(address => bool) public isBorrowing;\n\n    ///@notice declaring chainlink's price aggregator.\n    AggregatorV3Interface internal priceFeed;\n    address public constant baseAssetAddress =\n        0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e;\n\n    ///@notice declaring token variables.\n    IERC20 public immutable baseAsset;\n    RewardToken public immutable JdaiToken;\n\n    bytes32 public constant STAFF_ROLE = keccak256(\"STAFF_ROLE\");\n    uint public ethPrice;\n    uint public Fee = 3;\n    uint256 public totalStake = 0;\n\n    ///@notice initiating tokens\n    ///@param _baseAssetAddress address of base asset token\n    ///@param _JdaiAddress address of $FUSN token\n    constructor(IERC20 _baseAssetAddress, RewardToken _JdaiAddress) {\n        baseAsset = _baseAssetAddress;\n        JdaiToken = _JdaiAddress;\n        priceFeed = AggregatorV3Interface(baseAssetAddress);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(STAFF_ROLE, msg.sender);\n    }\n\n    modifier onlyStaff() {\n        require(hasRole(STAFF_ROLE, msg.sender), \"Caller is not a staff\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        require(\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\n            \"Caller is not a staff\"\n        );\n        _;\n    }\n\n    function grantStaff(address staff) external onlyAdmin {\n        grantRole(STAFF_ROLE, staff);\n    }\n\n    function revokeStaff(address staff) external onlyAdmin {\n        revokeRole(STAFF_ROLE, staff);\n    }\n\n    function setEthPrice(uint _ethPrice) external onlyStaff {\n        ethPrice = _ethPrice;\n    }\n\n    function setFee(uint _fee) external onlyStaff {\n        require(_fee < 1000, \"Can't set Fee > 1000!\");\n        Fee = _fee;\n    }\n\n    ///@notice checks if the borrow position has passed the liquidation point\n    ///@dev added 'virtual' identifier for MockCore to override\n    modifier passedLiquidation(address _borrower) virtual {\n        uint _ethPrice = getEthPrice();\n        require(\n            (_ethPrice * collateralBalance[_borrower]) <=\n                calculateLiquidationPoint(_borrower),\n            \"Position can't be liquidated!\"\n        );\n        _;\n    }\n\n    ///@notice Function to get latest price of ETH in USD\n    ///@return _ethPrice price of ETH in USD\n    function getEthPrice() public view returns (uint _ethPrice) {\n        _ethPrice = uint(ethPrice) / 10**8;\n    }\n\n    ///@notice calculates amount of time the lender has been lending since the last update.\n    ///@param _lender address of lender\n    ///@return lendingTime amount of time staked by lender\n    function calculateYieldTime(address _lender)\n        public\n        view\n        returns (uint lendingTime)\n    {\n        lendingTime = block.timestamp - startTime[_lender];\n    }\n\n    ///@notice calculates amount of $FUSN tokens the lender has earned since the last update.\n    ///@dev rate = timeStaked / amount of time needed to earn 100% of $FUSN tokens. 31536000 = number of seconds in a year.\n    ///@param _lender address of lender\n    ///@return yield amount of $FUSN tokens earned by lender\n    function calculateYieldTotal(address _lender)\n        public\n        view\n        returns (uint yield)\n    {\n        uint timeStaked = calculateYieldTime(_lender) * 10**18;\n        uint rate = timeStaked / 31536000;\n        yield = (lendingBalance[_lender] * rate) / 10**18;\n    }\n\n    ///@notice calculates the borrow limit depending on the price of ETH and borrow limit rate.\n    ///@return limit current borrow limit for user\n    function calculateBorrowLimit(address _borrower)\n        public\n        view\n        returns (uint limit)\n    {\n        uint _ethPrice = getEthPrice();\n        limit =\n            ((((_ethPrice * collateralBalance[_borrower]) / 100) * 70)) -\n            borrowBalance[_borrower];\n    }\n\n    function calculateLiquidationPoint(address _borrower)\n        public\n        view\n        returns (uint point)\n    {\n        point =\n            borrowBalance[_borrower] +\n            ((borrowBalance[_borrower] / 100) * 10);\n    }\n\n    ///@notice lends base asset.\n    ///@param _amount amount of tokens to lend\n    function lend(uint _amount) public {\n        require(_amount > 0, \"Can't lend amount: 0!\");\n        require(\n            baseAsset.balanceOf(msg.sender) >= _amount,\n            \"Insufficient balance!\"\n        );\n\n        if (isLending[msg.sender]) {\n            uint yield = calculateYieldTotal(msg.sender);\n            JdaiBalance[msg.sender] += yield;\n        }\n\n        lendingBalance[msg.sender] += _amount;\n        startTime[msg.sender] = block.timestamp;\n        isLending[msg.sender] = true;\n\n        require(\n            baseAsset.transferFrom(msg.sender, address(this), _amount),\n            \"Transaction failed!\"\n        );\n        totalStake += _amount;\n        emit Lend(msg.sender, _amount);\n    }\n\n    ///@notice withdraw base asset.\n    ///@param _amount amount of tokens to withdraw\n    function withdrawLend(uint _amount) public {\n        require(isLending[msg.sender], \"Can't withdraw before lending!\");\n        require(\n            lendingBalance[msg.sender] >= _amount,\n            \"Insufficient lending balance!\"\n        );\n\n        uint yield = calculateYieldTotal(msg.sender);\n        startTime[msg.sender] = block.timestamp;\n        uint withdrawAmount = _amount;\n        _amount = 0;\n        lendingBalance[msg.sender] -= withdrawAmount;\n\n        require(\n            baseAsset.transfer(msg.sender, withdrawAmount),\n            \"Transaction failed!\"\n        );\n        JdaiBalance[msg.sender] += yield;\n\n        if (lendingBalance[msg.sender] == 0) {\n            isLending[msg.sender] = false;\n        }\n\n        totalStake -= withdrawAmount;\n        emit WithdrawLend(msg.sender, withdrawAmount);\n    }\n\n    ///@notice claims all yield earned by lender.\n    function claimYield() public {\n        uint yield = calculateYieldTotal(msg.sender);\n\n        require(\n            yield > 0 || JdaiBalance[msg.sender] > 0,\n            \"No, $ tokens earned!\"\n        );\n\n        if (JdaiBalance[msg.sender] != 0) {\n            uint oldYield = JdaiBalance[msg.sender];\n            JdaiBalance[msg.sender] = 0;\n            yield += oldYield;\n        }\n\n        startTime[msg.sender] = block.timestamp;\n        JdaiToken.mint(msg.sender, yield);\n\n        emit ClaimYield(msg.sender, yield);\n    }\n\n    ///@notice collateralizes user's ETH and sets borrow limit\n    function collateralize() public payable {\n        require(msg.value > 0, \"Can't collaterlize ETH amount: 0!\");\n\n        collateralBalance[msg.sender] += msg.value;\n\n        emit Collateralize(msg.sender, msg.value);\n    }\n\n    ///@notice withdraw user's collateral ETH and recalculates the borrow limit\n    ///@param _amount amount of ETH the user wants to withdraw\n    function withdrawCollateral(uint _amount) public {\n        require(\n            collateralBalance[msg.sender] >= _amount,\n            \"Not enough collateral to withdraw!\"\n        );\n        require(\n            !isBorrowing[msg.sender],\n            \"Can't withdraw collateral while borrowing!\"\n        );\n\n        collateralBalance[msg.sender] -= _amount;\n\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\n        require(success, \"Transaction Failed!\");\n\n        emit WithdrawCollateral(msg.sender, _amount);\n    }\n\n    ///@notice borrows base asset\n    ///@param _amount amount of base asset to borrow\n    ///@dev deducting 0.3% from msg.sender's ETH collateral as protocol's fees\n    function borrow(uint _amount) public {\n        collateralBalance[msg.sender] -=\n            (collateralBalance[msg.sender] / 1000) *\n            3;\n\n        require(collateralBalance[msg.sender] > 0, \"No ETH collateralized!\");\n        require(\n            calculateBorrowLimit(msg.sender) >= _amount,\n            \"Borrow amount exceeds borrow limit!\"\n        );\n\n        isBorrowing[msg.sender] = true;\n        borrowBalance[msg.sender] += _amount;\n        uint _amountTransfer = _amount - ((_amount / 1000) * Fee);\n        require(\n            baseAsset.transfer(msg.sender, _amountTransfer),\n            \"Transaction failed!\"\n        );\n\n        emit Borrow(msg.sender, _amount);\n    }\n\n    ///@notice repays base asset debt\n    ///@param _amount amount of base asset to repay\n    function repay(uint _amount) public {\n        require(isBorrowing[msg.sender], \"Can't repay before borrowing!\");\n        require(\n            baseAsset.balanceOf(msg.sender) >= _amount,\n            \"Insufficient funds!\"\n        );\n        require(\n            _amount > 0 && _amount <= borrowBalance[msg.sender],\n            \"Can't repay amount: 0 or more than amount borrowed!\"\n        );\n\n        if (_amount == borrowBalance[msg.sender]) {\n            isBorrowing[msg.sender] = false;\n        }\n\n        borrowBalance[msg.sender] -= _amount;\n\n        require(\n            baseAsset.transferFrom(msg.sender, address(this), _amount),\n            \"Transaction Failed!\"\n        );\n\n        emit Repay(msg.sender, _amount);\n    }\n\n    ///@notice liquidates a borrow position\n    ///@param _borrower address of borrower\n    ///@dev passedLiquidation modifier checks if the borrow position has passed liquidation point\n    ///@dev liquidationReward 1.25% of borrower's ETH collateral\n    function liquidate(address _borrower) public passedLiquidation(_borrower) {\n        require(isBorrowing[_borrower], \"This address is not borrowing!\");\n\n        uint liquidationReward = (collateralBalance[_borrower] / 10000) * 125;\n\n        collateralBalance[_borrower] = 0;\n        borrowBalance[_borrower] = 0;\n        isBorrowing[_borrower] = false;\n\n        (bool success, ) = msg.sender.call{value: liquidationReward}(\"\");\n        require(success, \"Transaction Failed!\");\n\n        emit Liquidate(msg.sender, liquidationReward, _borrower);\n    }\n\n    ///@notice returns lending status of lender\n    function getLendingStatus(address _lender) external view returns (bool) {\n        return isLending[_lender];\n    }\n\n    ///@notice retuns amount of $FUSN tokens earned\n    function getEarnedJdaiTokens(address _lender) external view returns (uint) {\n        return JdaiBalance[_lender] + calculateYieldTotal(_lender);\n    }\n\n    ///@notice returns amount of base asset lent\n    function getLendingBalance(address _lender) external view returns (uint) {\n        return lendingBalance[_lender];\n    }\n\n    ///@notice returns amount of collateralized asset\n    function getCollateralBalance(address _borrower)\n        external\n        view\n        returns (uint)\n    {\n        return collateralBalance[_borrower];\n    }\n\n    ///@notice returns borrowing status of borrower\n    function getBorrowingStatus(address _borrower)\n        external\n        view\n        returns (bool)\n    {\n        return isBorrowing[_borrower];\n    }\n\n    ///@notice returns amount of base asset borrowed\n    function getBorrowBalance(address _borrower) external view returns (uint) {\n        return borrowBalance[_borrower];\n    }\n\n    ///@notice returns amount of base asset available to borrow\n    function getBorrowLimit(address _borrower) external view returns (uint) {\n        return calculateBorrowLimit(_borrower);\n    }\n\n    ///@notice returns liquidation point\n    function getLiquidationPoint(address _borrower)\n        external\n        view\n        returns (uint)\n    {\n        return calculateLiquidationPoint(_borrower);\n    }\n}\n"
    },
    "contracts/JdaiStaking2.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.1;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\n\ncontract JdaiStaking2 is Ownable {\n    using SafeMath for uint;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    \n    event RewardsTransferred(address holder, uint amount);\n    event RewardsDisbursed(uint amount);\n    \n    // deposit token contract address and reward token contract address\n    // these contracts are \"trusted\" and checked to not contain re-entrancy pattern \n    // to safely avoid checks-effects-interactions where needed to simplify logic\n    address public trustedDepositTokenAddress = 0x5799f00453eF2BC63ED57BBE84b1E9C9416b1B14;\n    address public trustedRewardTokenAddress = 0x4995e2FB10cD739A8f2b903686d72B16a222E114;\n    uint public constant LOCKUP_TIME = 30 days;\n\n    uint public constant STAKING_FEE_RATE_X_100 = 50;\n    uint public constant UNSTAKING_FEE_RATE_X_100 = 50;\n\n    // Amount of tokens\n    uint public disburseAmount = 9900e18;\n    // To be disbursed continuously over this duration\n    uint public disburseDuration = 180 days;\n\n    // If there are any undistributed or unclaimed tokens left in contract after this time\n    // Admin can claim them\n    uint public adminCanClaimAfter = 200 days;\n    \n    \n    // do not change this => disburse 100% rewards over `disburseDuration`\n    uint public disbursePercentX100 = 100e2;\n    \n    uint public contractDeployTime;\n    uint public adminClaimableTime;\n    uint public lastDisburseTime;\n    \n    // Contracts are not allowed to deposit, claim or withdraw\n    modifier noContractsAllowed() {\n        require(!(address(msg.sender).isContract()) && tx.origin == msg.sender, \"No Contracts Allowed!\");\n        _;\n    }\n    \n    constructor() {\n        contractDeployTime = block.timestamp;\n        adminClaimableTime = contractDeployTime.add(adminCanClaimAfter);\n        lastDisburseTime = contractDeployTime;\n    }\n    \n    uint public totalClaimedRewards = 0;\n    \n    EnumerableSet.AddressSet private holders;\n    \n    mapping (address => uint) public depositedTokens;\n    mapping (address => uint) public depositTime;\n    mapping (address => uint) public lastClaimedTime;\n    mapping (address => uint) public totalEarnedTokens;\n    mapping (address => uint) public lastDivPoints;\n    \n    uint public totalTokensDisbursed = 0;\n    uint public contractBalance = 0;\n    \n    uint public totalDivPoints = 0;\n    uint public totalTokens = 0;\n\n    uint internal pointMultiplier = 1e18;\n    \n    function addContractBalance(uint amount) public onlyOwner {\n        require(IERC20(trustedRewardTokenAddress).transferFrom(msg.sender, address(this), amount), \"Cannot add balance!\");\n        contractBalance = contractBalance.add(amount);\n    }\n    \n    \n    function updateAccount(address account) private {\n        disburseTokens();\n        uint pendingDivs = getPendingDivs(account);\n        if (pendingDivs > 0) {\n            require(IERC20(trustedRewardTokenAddress).transfer(account, pendingDivs), \"Could not transfer tokens.\");\n            totalEarnedTokens[account] = totalEarnedTokens[account].add(pendingDivs);\n            totalClaimedRewards = totalClaimedRewards.add(pendingDivs);\n            emit RewardsTransferred(account, pendingDivs);\n        }\n        lastClaimedTime[account] = block.timestamp;\n        lastDivPoints[account] = totalDivPoints;\n    }\n    \n    function getPendingDivs(address _holder) public view returns (uint) {\n        if (!holders.contains(_holder)) return 0;\n        if (depositedTokens[_holder] == 0) return 0;\n        \n        uint newDivPoints = totalDivPoints.sub(lastDivPoints[_holder]);\n\n        uint depositedAmount = depositedTokens[_holder];\n        \n        uint pendingDivs = depositedAmount.mul(newDivPoints).div(pointMultiplier);\n            \n        return pendingDivs;\n    }\n    \n    function getEstimatedPendingDivs(address _holder) public view returns (uint) {\n        uint pendingDivs = getPendingDivs(_holder);\n        uint pendingDisbursement = getPendingDisbursement();\n        if (contractBalance < pendingDisbursement) {\n            pendingDisbursement = contractBalance;\n        }\n        uint depositedAmount = depositedTokens[_holder];\n        if (depositedAmount == 0) return 0;\n        if (totalTokens == 0) return 0;\n        \n        uint myShare = depositedAmount.mul(pendingDisbursement).div(totalTokens);\n                                \n        return pendingDivs.add(myShare);\n    }\n    \n    function getNumberOfHolders() public view returns (uint) {\n        return holders.length();\n    }\n    \n    \n    function deposit(uint amountToDeposit) external noContractsAllowed {\n        require(block.timestamp.add(LOCKUP_TIME) <= contractDeployTime.add(disburseDuration), \"Deposits are closed now!\");\n        require(amountToDeposit > 0, \"Cannot deposit 0 Tokens\");\n        \n        updateAccount(msg.sender);\n        \n        require(IERC20(trustedDepositTokenAddress).transferFrom(msg.sender, address(this), amountToDeposit), \"Insufficient Token Allowance\");\n        \n        uint fee = amountToDeposit.mul(STAKING_FEE_RATE_X_100).div(100e2);\n        uint amountAfterFee = amountToDeposit.sub(fee);\n        \n        // require(Token(trustedDepositTokenAddress).transfer(owner, fee), \"Fee transfer failed!\");\n        \n        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);\n        totalTokens = totalTokens.add(amountAfterFee);\n\n        holders.add(msg.sender);\n        depositTime[msg.sender] = block.timestamp;\n    }\n    \n    function withdraw(uint amountToWithdraw) external noContractsAllowed {\n        require(amountToWithdraw > 0, \"Cannot withdraw 0 Tokens!\");\n        require(block.timestamp.sub(depositTime[msg.sender]) > LOCKUP_TIME, \"You recently staked, please wait before withdrawing.\");\n        require(depositedTokens[msg.sender] >= amountToWithdraw, \"Invalid amount to withdraw\");\n        \n        updateAccount(msg.sender);\n        \n        uint fee = amountToWithdraw.mul(UNSTAKING_FEE_RATE_X_100).div(100e2);\n        uint amountAfterFee = amountToWithdraw.sub(fee);\n        \n        // require(Token(trustedDepositTokenAddress).transfer(owner, fee), \"Fee transfer failed!\");\n        \n        require(IERC20(trustedDepositTokenAddress).transfer(msg.sender, amountAfterFee), \"Could not transfer tokens.\");\n        \n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\n        totalTokens = totalTokens.sub(amountToWithdraw);\n        \n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\n            holders.remove(msg.sender);\n        }\n    }\n    \n    // withdraw without caring about Rewards\n    function emergencyWithdraw(uint amountToWithdraw) external noContractsAllowed {\n        require(amountToWithdraw > 0, \"Cannot withdraw 0 Tokens!\");\n        require(block.timestamp.sub(depositTime[msg.sender]) > LOCKUP_TIME, \"You recently staked, please wait before withdrawing.\");\n        require(depositedTokens[msg.sender] >= amountToWithdraw, \"Invalid amount to withdraw\");\n        \n        // manual update account here without withdrawing pending rewards\n        disburseTokens();\n        lastClaimedTime[msg.sender] = block.timestamp;\n        lastDivPoints[msg.sender] = totalDivPoints;\n        \n        uint fee = amountToWithdraw.mul(UNSTAKING_FEE_RATE_X_100).div(100e2);\n        uint amountAfterFee = amountToWithdraw.sub(fee);\n        \n        require(IERC20(trustedDepositTokenAddress).transfer(owner(), fee), \"Fee transfer failed!\");\n        \n        require(IERC20(trustedDepositTokenAddress).transfer(msg.sender, amountAfterFee), \"Could not transfer tokens.\");\n        \n        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);\n        totalTokens = totalTokens.sub(amountToWithdraw);\n        \n        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {\n            holders.remove(msg.sender);\n        }\n    }\n    \n    function claim() public {\n        updateAccount(msg.sender);\n    }\n    \n    function disburseTokens() private {\n        uint amount = getPendingDisbursement();\n\n        if (contractBalance < amount) {\n            amount = contractBalance;\n        }\n        if (amount == 0 || totalTokens == 0) return;\n        \n        totalDivPoints = totalDivPoints.add(amount.mul(pointMultiplier).div(totalTokens));\n        totalTokensDisbursed = totalTokensDisbursed.add(amount);\n        emit RewardsDisbursed(amount);\n        \n        contractBalance = contractBalance.sub(amount);\n        lastDisburseTime = block.timestamp;\n        \n    }\n    \n    function getPendingDisbursement() public view returns (uint) {\n        uint timeDiff;\n        uint _now = block.timestamp;\n        uint _stakingEndTime = contractDeployTime.add(disburseDuration);\n        if (_now > _stakingEndTime) {\n            _now = _stakingEndTime;\n        }\n        if (lastDisburseTime >= _now) {\n            timeDiff = 0;\n        } else {\n            timeDiff = _now.sub(lastDisburseTime);   \n        }\n        \n        uint pendingDisburse = disburseAmount\n                                    .mul(disbursePercentX100)\n                                    .mul(timeDiff)\n                                    .div(disburseDuration)\n                                    .div(10000);\n        return pendingDisburse;\n    }\n    \n    function getHoldersList(uint startIndex, uint endIndex) \n        public \n        view \n        returns (address[] memory stakers, \n            uint[] memory stakingTimestamps, \n            uint[] memory lastClaimedTimeStamps,\n            uint[] memory stakedTokens) {\n        require (startIndex < endIndex);\n        \n        uint length = endIndex.sub(startIndex);\n        address[] memory _stakers = new address[](length);\n        uint[] memory _stakingTimestamps = new uint[](length);\n        uint[] memory _lastClaimedTimeStamps = new uint[](length);\n        uint[] memory _stakedTokens = new uint[](length);\n        \n        for (uint i = startIndex; i < endIndex; i = i.add(1)) {\n            address staker = holders.at(i);\n            uint listIndex = i.sub(startIndex);\n            _stakers[listIndex] = staker;\n            _stakingTimestamps[listIndex] = depositTime[staker];\n            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];\n            _stakedTokens[listIndex] = depositedTokens[staker];\n        }\n        \n        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);\n    }\n    \n\n    // function to allow owner to claim *other* modern ERC20 tokens sent to this contract\n    function transferAnyERC20Token(address _tokenAddr, address _to, uint _amount) public onlyOwner {\n        \n        require(_tokenAddr != trustedDepositTokenAddress, \"Admin cannot transfer out deposit tokens from this vault!\");\n        require((_tokenAddr != trustedRewardTokenAddress) || (block.timestamp > adminClaimableTime), \"Admin cannot Transfer out Reward Tokens Yet!\");\n        require(IERC20(_tokenAddr).transfer(_to, _amount), \"Could not transfer out tokens!\");\n    }\n    \n    // function to allow owner to claim *other* modern ERC20 tokens sent to this contract\n    function transferAnyOldERC20Token(address _tokenAddr, address _to, uint _amount) public onlyOwner {\n        \n        require(_tokenAddr != trustedDepositTokenAddress, \"Admin cannot transfer out deposit tokens from this vault!\");\n        require((_tokenAddr != trustedRewardTokenAddress) || (block.timestamp > adminClaimableTime), \"Admin cannot Transfer out Reward Tokens Yet!\");\n        \n        IERC20(_tokenAddr).transfer(_to, _amount);\n    }\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}